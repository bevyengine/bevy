# Add the contents of this file to `config.toml` to enable "fast build" configuration. Please read the notes below.

# NOTE: For maximum performance, build using a nightly compiler
# If you are using rust stable, remove the "-Zshare-generics=y" below.

[target.x86_64-unknown-linux-gnu]
linker = "clang"
rustflags = [
  "-Clink-arg=-fuse-ld=lld", # Use LLD Linker. 'lld' and 'clang' must be installed; e.g., sudo apt-get install lld clang
  "-Zshare-generics=y",      # (Nightly) Make the current crate share its generic instantiations
  "-Zthreads=0",             # (Nightly) Use improved multithreading with the recommended amount of threads.
]

# Note: The default linker on Darwin, ld-prime, is faster than lld
[target.x86_64-apple-darwin]
rustflags = [
  "-Zshare-generics=y",                                   # (Nightly) Make the current crate share its generic instantiations
  "-Zthreads=0",                                          # (Nightly) Use improved multithreading with the recommended amount of threads.
]

[target.aarch64-apple-darwin]
rustflags = [
  "-Zshare-generics=y",                                      # (Nightly) Make the current crate share its generic instantiations
  "-Zthreads=0",                                             # (Nightly) Use improved multithreading with the recommended amount of threads.
]

# On windows, we can install rust-lld.exe using cargo and rustup
# cargo install -f cargo-binutils
# rustup component add llvm-tools-preview
[target.x86_64-pc-windows-msvc]
linker = "rust-lld.exe" # Use LLD Linker
rustflags = [
  "-Zshare-generics=y",
  "-Zthreads=0",        # (Nightly) Use improved multithreading with the recommended amount of threads.
]

# Optional: Uncommenting the following improves compile times, but reduces the amount of debug info to 'line number tables only'
# In most cases the gains are negligible, but if you are on macos and have slow compile times you should see significant gains.
#[profile.dev]
#debug = 1

//! This build script is used to generate `src/official_bevy_crates.rs` which contains a list of official bevy crates.
//! This is used to correctly resolve re-exported third-party crates starting with `bevy_`.

use std::io::Write;

fn regenerate_official_crates_rs() -> std::io::Result<()> {
    let cwd = std::env::current_dir()?;

    // go to $cwd/../ and check the name of the directory it must match "crates"
    let parent = cwd.parent().unwrap();
    let parent_name = parent.file_name().unwrap();

    if parent_name != "crates" {
        // we are being built as a dependency pulled from crates.io so we can't generate the official crates list

        // there is no need to rerun the build script
        println!("cargo:rerun-if-changed=build.rs");
        return Ok(());
    }

    // we are building bevy from its real repository and are not a dependency
    // so we can list the directory to get all official bevy crates

    // we need to rerun the build script if the list of official bevy crates changes
    println!("cargo:rerun-if-changed=../");

    let mut official_bevy_crates = std::fs::read_dir(parent)?
        .filter_map(|entry| {
            let entry = entry.unwrap();
            let file_type = entry.file_type().unwrap();
            if !file_type.is_dir() {
                return None;
            }
            let path = entry.path();
            let path = path.file_name().unwrap();
            let path = path.to_str().unwrap();
            Some(path.to_string())
        })
        .collect::<Vec<String>>();

    // sort the list of official bevy crates to be able to make a binary search and to make it deterministic
    official_bevy_crates.sort_unstable();

    // now we can generate official_bevy_crates.rs file in the $cwd/src directory
    let official_bevy_crates_rs = cwd.join("src/official_bevy_crates.rs");
    let mut official_bevy_crates_rs = std::fs::File::create(official_bevy_crates_rs)?;
    writeln!(
        official_bevy_crates_rs,
        "// This file is automatically generated by build.rs\n",
    )?;
    writeln!(official_bevy_crates_rs, "/// List of official bevy crates.")?;
    writeln!(official_bevy_crates_rs, "/// This is used to correctly resolve re-exported third-party crates starting with `bevy_`.")?;
    writeln!(
        official_bevy_crates_rs,
        "pub const OFFICIAL_BEVY_CRATES: &[&str] = &["
    )?;
    for crate_name in official_bevy_crates {
        writeln!(official_bevy_crates_rs, "    \"{}\",", crate_name)?;
    }
    writeln!(official_bevy_crates_rs, "];")?;
    Ok(())
}

fn main() {
    if let Err(err) = regenerate_official_crates_rs() {
        eprintln!("Error: {}", err);
    }
}

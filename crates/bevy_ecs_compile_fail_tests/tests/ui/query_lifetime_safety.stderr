error[E0521]: borrowed data escapes outside of closure
  --> tests/ui/query_lifetime_safety.rs:78:35
   |
76 |             let mut opt_data: Option<&Foo> = None;
   |                 ------------ `opt_data` declared here, outside of the closure body
77 |             let mut opt_data_2: Option<Mut<Foo>> = None;
78 |             query.for_each(|data| opt_data = Some(data));
   |                             ----  ^^^^^^^^^^^^^^^^^^^^^ `data` escapes the closure body here
   |                             |
   |                             `data` is a reference that is only valid in the closure body

error[E0521]: borrowed data escapes outside of closure
  --> tests/ui/query_lifetime_safety.rs:79:39
   |
77 |             let mut opt_data_2: Option<Mut<Foo>> = None;
   |                 -------------- `opt_data_2` declared here, outside of the closure body
78 |             query.for_each(|data| opt_data = Some(data));
79 |             query.for_each_mut(|data| opt_data_2 = Some(data));
   |                                 ----  ^^^^^^^^^^^^^^^^^^^^^^^ `data` escapes the closure body here
   |                                 |
   |                                 `data` is a reference that is only valid in the closure body

error[E0521]: borrowed data escapes outside of closure
  --> tests/ui/query_lifetime_safety.rs:86:39
   |
84 |             let mut opt_data_2: Option<Mut<Foo>> = None;
   |                 -------------- `opt_data_2` declared here, outside of the closure body
85 |             let mut opt_data: Option<&Foo> = None;
86 |             query.for_each_mut(|data| opt_data_2 = Some(data));
   |                                 ----  ^^^^^^^^^^^^^^^^^^^^^^^ `data` escapes the closure body here
   |                                 |
   |                                 `data` is a reference that is only valid in the closure body

error[E0521]: borrowed data escapes outside of closure
  --> tests/ui/query_lifetime_safety.rs:87:35
   |
85 |             let mut opt_data: Option<&Foo> = None;
   |                 ------------ `opt_data` declared here, outside of the closure body
86 |             query.for_each_mut(|data| opt_data_2 = Some(data));
87 |             query.for_each(|data| opt_data = Some(data));
   |                             ----  ^^^^^^^^^^^^^^^^^^^^^ `data` escapes the closure body here
   |                             |
   |                             `data` is a reference that is only valid in the closure body

error[E0502]: cannot borrow `query` as mutable because it is also borrowed as immutable
  --> tests/ui/query_lifetime_safety.rs:17:39
   |
16 |             let data: &Foo = query.get(e).unwrap();
   |                              ------------ immutable borrow occurs here
17 |             let mut data2: Mut<Foo> = query.get_mut(e).unwrap();
   |                                       ^^^^^^^^^^^^^^^^ mutable borrow occurs here
18 |             assert_eq!(data, &mut *data2); // oops UB
   |             ----------------------------- immutable borrow later used here

error[E0502]: cannot borrow `query` as immutable because it is also borrowed as mutable
  --> tests/ui/query_lifetime_safety.rs:23:30
   |
22 |             let mut data2: Mut<Foo> = query.get_mut(e).unwrap();
   |                                       ---------------- mutable borrow occurs here
23 |             let data: &Foo = query.get(e).unwrap();
   |                              ^^^^^^^^^^^^ immutable borrow occurs here
24 |             assert_eq!(data, &mut *data2); // oops UB
   |                                    ----- mutable borrow later used here

error[E0502]: cannot borrow `query` as mutable because it is also borrowed as immutable
  --> tests/ui/query_lifetime_safety.rs:29:39
   |
28 |             let data: &Foo = query.get_component::<Foo>(e).unwrap();
   |                              ----------------------------- immutable borrow occurs here
29 |             let mut data2: Mut<Foo> = query.get_component_mut(e).unwrap();
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
30 |             assert_eq!(data, &mut *data2); // oops UB
   |             ----------------------------- immutable borrow later used here

error[E0502]: cannot borrow `query` as immutable because it is also borrowed as mutable
  --> tests/ui/query_lifetime_safety.rs:35:30
   |
34 |             let mut data2: Mut<Foo> = query.get_component_mut(e).unwrap();
   |                                       -------------------------- mutable borrow occurs here
35 |             let data: &Foo = query.get_component::<Foo>(e).unwrap();
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
36 |             assert_eq!(data, &mut *data2); // oops UB
   |                                    ----- mutable borrow later used here

error[E0502]: cannot borrow `query` as mutable because it is also borrowed as immutable
  --> tests/ui/query_lifetime_safety.rs:41:39
   |
40 |             let data: &Foo = query.single();
   |                              -------------- immutable borrow occurs here
41 |             let mut data2: Mut<Foo> = query.single_mut();
   |                                       ^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
42 |             assert_eq!(data, &mut *data2); // oops UB
   |             ----------------------------- immutable borrow later used here

error[E0502]: cannot borrow `query` as immutable because it is also borrowed as mutable
  --> tests/ui/query_lifetime_safety.rs:47:30
   |
46 |             let mut data2: Mut<Foo> = query.single_mut();
   |                                       ------------------ mutable borrow occurs here
47 |             let data: &Foo = query.single();
   |                              ^^^^^^^^^^^^^^ immutable borrow occurs here
48 |             assert_eq!(data, &mut *data2); // oops UB
   |                                    ----- mutable borrow later used here

error[E0502]: cannot borrow `query` as mutable because it is also borrowed as immutable
  --> tests/ui/query_lifetime_safety.rs:53:39
   |
52 |             let data: &Foo = query.get_single().unwrap();
   |                              ------------------ immutable borrow occurs here
53 |             let mut data2: Mut<Foo> = query.get_single_mut().unwrap();
   |                                       ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here
54 |             assert_eq!(data, &mut *data2); // oops UB
   |             ----------------------------- immutable borrow later used here

error[E0502]: cannot borrow `query` as immutable because it is also borrowed as mutable
  --> tests/ui/query_lifetime_safety.rs:59:30
   |
58 |             let mut data2: Mut<Foo> = query.get_single_mut().unwrap();
   |                                       ---------------------- mutable borrow occurs here
59 |             let data: &Foo = query.get_single().unwrap();
   |                              ^^^^^^^^^^^^^^^^^^ immutable borrow occurs here
60 |             assert_eq!(data, &mut *data2); // oops UB
   |                                    ----- mutable borrow later used here

error[E0502]: cannot borrow `query` as mutable because it is also borrowed as immutable
  --> tests/ui/query_lifetime_safety.rs:65:39
   |
64 |             let data: &Foo = query.iter().next().unwrap();
   |                              ------------ immutable borrow occurs here
65 |             let mut data2: Mut<Foo> = query.iter_mut().next().unwrap();
   |                                       ^^^^^^^^^^^^^^^^ mutable borrow occurs here
66 |             assert_eq!(data, &mut *data2); // oops UB
   |             ----------------------------- immutable borrow later used here

error[E0502]: cannot borrow `query` as immutable because it is also borrowed as mutable
  --> tests/ui/query_lifetime_safety.rs:71:30
   |
70 |             let mut data2: Mut<Foo> = query.iter_mut().next().unwrap();
   |                                       ---------------- mutable borrow occurs here
71 |             let data: &Foo = query.iter().next().unwrap();
   |                              ^^^^^^^^^^^^ immutable borrow occurs here
72 |             assert_eq!(data, &mut *data2); // oops UB
   |                                    ----- mutable borrow later used here

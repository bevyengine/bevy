[package]
name = "bevy_ecs"
version = "0.15.0-dev"
edition = "2021"
description = "Bevy Engine's entity component system"
homepage = "https://bevyengine.org"
repository = "https://github.com/bevyengine/bevy"
license = "MIT OR Apache-2.0"
keywords = ["ecs", "game", "bevy"]
categories = ["game-engines", "data-structures"]
rust-version = "1.81.0"

[features]
default = ["std", "bevy_reflect", "async_executor"]

# Functionality

## Enables multithreading support. Schedules will attempt to run systems on
## multiple threads whenever possible.
multi_threaded = ["bevy_tasks/multi_threaded", "dep:arrayvec"]

## Adds serialization support through `serde`.
serialize = ["dep:serde", "bevy_utils/serde"]

## Adds runtime reflection support using `bevy_reflect`.
bevy_reflect = ["dep:bevy_reflect"]

## Extends reflection support to functions.
reflect_functions = ["bevy_reflect", "bevy_reflect/functions"]

# Debugging Features

## Enables `tracing` integration, allowing spans and other metrics to be reported
## through that framework.
trace = ["std", "dep:tracing", "bevy_utils/tracing"]

## Enables a more detailed set of traces which may be noisy if left on by default.
detailed_trace = ["trace"]

## Provides system stepping support, allowing them to be paused, stepped, and
## other debug operations which can help with diagnosing certain behaviors.
bevy_debug_stepping = []

## Provides more detailed tracking of the cause of various effects within the ECS.
## This will often provide more detailed error messages.
track_change_detection = []

# Executor Backend

## Uses `async-executor` as a task execution backend.
## This backend is incompatible with `no_std` targets.
async_executor = ["dep:bevy_tasks", "std", "bevy_tasks/async_executor"]

## Uses `edge-executor` as a task execution backend.
## Use this instead of `async-executor` if working on a `no_std` target.
edge_executor = ["dep:bevy_tasks", "bevy_tasks/edge_executor"]

# Platform Compatibility

## Allows access to the `std` crate. Enabling this feature will prevent compilation
## on `no_std` targets, but provides access to certain additional features on
## supported platforms.
std = [
  "bevy_reflect?/std",
  "bevy_tasks/std",
  "bevy_utils/std",
  "bitflags/std",
  "concurrent-queue/std",
  "disqualified/alloc",
  "fixedbitset/std",
  "indexmap/std",
  "serde?/std",
  "nonmax/std",
  "arrayvec?/std",
  "log/std",
]

## `critical-section` provides the building blocks for synchronization primitives
## on all platforms, including `no_std`.
critical-section = [
  "dep:critical-section",
  "bevy_tasks?/critical-section",
  "portable-atomic?/critical-section",
]

## `portable-atomic` provides additional platform support for atomic types and
## operations, even on targets without native support. 
portable-atomic = [
  "dep:portable-atomic",
  "dep:portable-atomic-util",
  "bevy_tasks?/portable-atomic",
  "concurrent-queue/portable-atomic",
  "spin/portable_atomic",
]

[dependencies]
bevy_ptr = { path = "../bevy_ptr", version = "0.15.0-dev" }
bevy_reflect = { path = "../bevy_reflect", version = "0.15.0-dev", default-features = false, optional = true }
bevy_tasks = { path = "../bevy_tasks", version = "0.15.0-dev", default-features = false, optional = true }
bevy_utils = { path = "../bevy_utils", version = "0.15.0-dev", default-features = false, features = [
  "alloc",
] }
bevy_ecs_macros = { path = "macros", version = "0.15.0-dev" }

bitflags = { version = "2.3", default-features = false }
concurrent-queue = { version = "2.5.0", default-features = false }
disqualified = { version = "1.0", default-features = false }
fixedbitset = { version = "0.5", default-features = false }
serde = { version = "1", default-features = false, features = [
  "alloc",
], optional = true }
thiserror = { version = "2", default-features = false }
derive_more = { version = "1", default-features = false, features = [
  "from",
  "display",
  "into",
  "as_ref",
] }
nonmax = { version = "0.5", default-features = false }
arrayvec = { version = "0.7.4", default-features = false, optional = true }
smallvec = { version = "1", features = ["union"] }
indexmap = { version = "2.5.0", default-features = false }
variadics_please = { version = "1.1", default-features = false }
critical-section = { version = "1.2.0", optional = true }
portable-atomic = { version = "1", default-features = false, features = [
  "fallback",
], optional = true }
portable-atomic-util = { version = "0.2.4", features = [
  "alloc",
], optional = true }
spin = { version = "0.9.8", default-features = false, features = [
  "spin_mutex",
  "rwlock",
] }
tracing = { version = "0.1", default-features = false, optional = true }
log = { version = "0.4", default-features = false }
bumpalo = "3"

[dev-dependencies]
rand = "0.8"
static_assertions = "1.1.0"
serde_test = "1.0"

[[example]]
name = "events"
path = "examples/events.rs"

[[example]]
name = "resources"
path = "examples/resources.rs"

[[example]]
name = "change_detection"
path = "examples/change_detection.rs"

[lints]
workspace = true

[package.metadata.docs.rs]
rustdoc-args = ["-Zunstable-options", "--generate-link-to-definition"]
all-features = true

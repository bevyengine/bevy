use std::any::TypeId;
use std::hash::Hash;
use std::marker::PhantomData;

use crate::system::{BoxedSystem, Command, IntoSystem};
use crate::world::{Mut, World};
// Needed for derive(Component) macro
use crate::{self as bevy_ecs, TypeIdMap};
use bevy_ecs_macros::Resource;

/// Stores initialized [`System`]s, so they can be reused and run in an ad-hoc fashion.
///
/// Systems are keyed by their [`SystemLabel`]:
///  - all systems with a given label will be run (in linear registration order) when a given label is run
///  - repeated calls with the same function type will reuse cached state, including for change detection
///
/// Any [`Commands`](crate::system::Commands) generated by these systems (but not other systems), will immediately be applied.
///
/// This type is stored as a [`Resource`](crate::system::Resource) on each [`World`], initialized by default.
/// However, it will likely be easier to use the corresponding methods on [`World`],
/// to avoid having to worry about split mutable borrows yourself.
///
/// # Limitations
///
///  - stored systems cannot be chained: they can neither have an [`In`](crate::system::In) nor return any values
///  - stored systems cannot recurse: they cannot run other systems via the [`SystemRegistry`] methods on `World` or `Commands`
///  - exclusive systems cannot be used
///
/// # Examples
///
/// You can run a single system directly on the World,
/// applying its effect and caching its state for the next time
/// you call this method (internally, this is based on [`SystemTypeIdLabel`]).
///
/// ```rust
/// use bevy_ecs::prelude::*;
///
/// let mut world = World::new();  
///
/// #[derive(Default, PartialEq, Debug)]
/// struct Counter(u8);
///
/// fn count_up(mut counter: ResMut<Counter>){
///     counter.0 += 1;
/// }
///
/// world.init_resource::<Counter>();
/// world.run_system(count_up);
///
/// assert_eq!(Counter(1), *world.resource());
/// ```
///
/// These systems immediately apply commands and cache state,
/// ensuring that change detection and [`Local`](crate::system::Local) variables work correctly.
///
/// ```rust
/// use bevy_ecs::prelude::*;
///
/// let mut world = World::new();
///
/// #[derive(Component)]
/// struct Marker;
///
/// fn spawn_7_entities(mut commands: Commands) {
///     for _ in 0..7 {
///         commands.spawn(Marker);
///     }
/// }
///
/// fn assert_7_spawned(query: Query<(), Added<Marker>>){
///     let n_spawned = query.iter().count();
///     assert_eq!(n_spawned, 7);
/// }
///
/// world.run_system(spawn_7_entities);
/// world.run_system(assert_7_spawned);
/// ```
#[derive(Default)]
pub struct SystemRegistry {
    systems: Vec<(bool, BoxedSystem)>,
    indices: TypeIdMap<usize>,
}

impl SystemRegistry {
    /// Registers a system in the [`SystemRegistry`], so then it can be later run.
    ///
    /// This allows the system to be run by their [`SystemTypeIdLabel`] using the `run_systems_by_label` method.
    /// Repeatedly registering a system will have no effect.
    ///
    /// When [`run_systems_by_label`](SystemRegistry::run_systems_by_label) is called,
    /// all registered systems that match that label will be evaluated (in insertion order).
    ///
    /// To provide explicit label(s), use [`register_system_with_labels`](SystemRegistry::register_system_with_labels).
    #[inline]
    pub fn register_system<M, S: IntoSystem<(), (), M> + 'static>(
        &mut self,
        system: S,
    ) -> SystemId {
        let type_id = TypeId::of::<S>();

        let index = *self.indices.entry(type_id).or_insert_with(|| {
            let index = self.systems.len();
            self.systems
                .push((false, Box::new(IntoSystem::into_system(system))));
            index
        });

        SystemId::new(index)
    }

    /// Runs the supplied system on the [`World`] a single time.
    ///
    /// You do not need to register systems before they are run in this way.
    /// Instead, systems will be automatically registered according to their [`SystemTypeSet`] the first time this method is called on them.
    ///
    /// System state will be reused between runs, ensuring that [`Local`](crate::system::Local) variables and change detection works correctly.
    ///
    /// If, via manual system registration, you have somehow managed to insert more than one system with the same [`SystemTypeSet`],
    /// only the first will be run.
    pub fn run_system<M, S: IntoSystem<(), (), M> + 'static>(
        &mut self,
        world: &mut World,
        system: S,
    ) {
        let id = self.register_system(system);
        self.run_system_by_id(world, id)
            .expect("System was registered before running");
    }

    /// Run the systems corresponding to the label stored in the provided [`Callback`]
    ///
    /// Systems must be registered before they can be run by their label,
    /// including via this method.
    ///
    /// Systems will be run sequentially in registration order if more than one registered system matches the provided label.
    #[inline]
    pub fn run_system_by_id(
        &mut self,
        world: &mut World,
        id: SystemId,
    ) -> Result<(), SystemRegistryError> {
        match self.systems.get_mut(id.index()) {
            Some((initialized, matching_system)) => {
                if !*initialized {
                    matching_system.initialize(world);
                    *initialized = true;
                }
                matching_system.run((), world);
                matching_system.apply_buffers(world);
                Ok(())
            }
            None => Err(SystemRegistryError::SystemIdNotRegistered(id)),
        }
    }
}

#[derive(Debug, Copy, Clone, Hash, Ord, PartialOrd, Eq, PartialEq)]
pub struct SystemId(usize);

impl SystemId {
    #[inline]
    pub const fn new(index: usize) -> SystemId {
        SystemId(index)
    }

    #[inline]
    pub fn index(self) -> usize {
        self.0
    }
}

impl World {
    #[inline]
    pub fn register_system<M, S: IntoSystem<(), (), M> + 'static>(
        &mut self,
        system: S,
    ) -> SystemId {
        self.resource_mut::<SystemRegistry>()
            .register_system(system)
    }

    /// Runs the supplied system on the [`World`] a single time.
    ///
    /// Calls [`SystemRegistry::run_system`].
    #[inline]
    pub fn run_system<M, S: IntoSystem<(), (), M> + 'static>(&mut self, system: S) {
        self.resource_scope(|world, mut registry: Mut<SystemRegistry>| {
            registry.run_system(world, system);
        });
    }

    /// Run the systems corresponding to the set stored in the provided [`Callback`]
    ///
    /// Calls [`SystemRegistry::run_callback`].
    #[inline]
    pub fn run_system_by_id(&mut self, id: SystemId) -> Result<(), SystemRegistryError> {
        self.resource_scope(|world, mut registry: Mut<SystemRegistry>| {
            registry.run_system_by_id(world, id)
        })
    }
}

/// The [`Command`] type for [`SystemRegistry::run_system`]
#[derive(Debug, Clone)]
pub struct RunSystem<M: Send + Sync + 'static, S: IntoSystem<(), (), M> + Send + Sync + 'static> {
    _phantom_marker: PhantomData<M>,
    system: S,
}

impl<M: Send + Sync + 'static, S: IntoSystem<(), (), M> + Send + Sync + 'static> RunSystem<M, S> {
    /// Creates a new [`Command`] struct, which can be added to [`Commands`](crate::system::Commands)
    #[inline]
    #[must_use]
    pub fn new(system: S) -> Self {
        Self {
            _phantom_marker: PhantomData::default(),
            system,
        }
    }
}

impl<M: Send + Sync + 'static, S: IntoSystem<(), (), M> + Send + Sync + 'static> Command
    for RunSystem<M, S>
{
    #[inline]
    fn apply(self, world: &mut World) {
        if self.flush {
            world.run_system(self.system);
        } else {
            world.run_system_without_flushing(self.system);
        }
    }
}

/// The [`Command`] type for [`SystemRegistry::run_systems_by_label`]
#[derive(Debug, Clone)]
pub struct RunSystemById {
    pub system_id: SystemId,
}

impl RunSystemById {
    pub fn new(system_id: SystemId) -> Self {
        Self { system_id }
    }
}

impl Command for RunSystemById {
    #[inline]
    fn write(self, world: &mut World) {
        world.resource_scope(|world, mut registry: Mut<SystemRegistry>| {
            registry
                .run_system_by_id(world, self.system_id)
                // Ideally this error should be handled more gracefully,
                // but that's blocked on a full error handling solution for commands
                .unwrap();
        });
    }
}

/// An operation on a [`SystemRegistry`] failed
#[derive(Debug)]
pub enum SystemRegistryError {
    /// A system was run by label, but no system with that label was found.
    ///
    /// Did you forget to register it?
    SystemIdNotRegistered(SystemId),
}

mod tests {
    use crate::prelude::*;

    #[derive(Default, PartialEq, Debug)]
    struct Counter(u8);

    #[allow(dead_code)]
    fn count_up(mut counter: ResMut<Counter>) {
        counter.0 += 1;
    }

    #[test]
    fn run_system() {
        let mut world = World::new();
        world.init_resource::<Counter>();
        assert_eq!(*world.resource::<Counter>(), Counter(0));
        world.run_system(count_up);
        assert_eq!(*world.resource::<Counter>(), Counter(1));
    }

    #[test]
    /// We need to ensure that the system registry is accessible
    /// even after being used once.
    fn run_two_systems() {
        let mut world = World::new();
        world.init_resource::<Counter>();
        assert_eq!(*world.resource::<Counter>(), Counter(0));
        world.run_system(count_up);
        assert_eq!(*world.resource::<Counter>(), Counter(1));
        world.run_system(count_up);
        assert_eq!(*world.resource::<Counter>(), Counter(2));
    }

    #[allow(dead_code)]
    fn spawn_entity(mut commands: Commands) {
        commands.spawn();
    }

    #[test]
    fn command_processing() {
        let mut world = World::new();
        world.init_resource::<Counter>();
        assert_eq!(world.entities.len(), 0);
        world.run_system(spawn_entity);
        assert_eq!(world.entities.len(), 1);
    }

    #[test]
    fn non_send_resources() {
        fn non_send_count_down(mut ns: NonSendMut<Counter>) {
            ns.0 -= 1;
        }

        let mut world = World::new();
        world.insert_non_send_resource(Counter(10));
        assert_eq!(*world.non_send_resource::<Counter>(), Counter(10));
        world.run_system(non_send_count_down);
        assert_eq!(*world.non_send_resource::<Counter>(), Counter(9));
    }

    #[test]
    fn change_detection() {
        #[derive(Default)]
        struct ChangeDetector;

        #[allow(dead_code)]
        fn count_up_iff_changed(
            mut counter: ResMut<Counter>,
            change_detector: ResMut<ChangeDetector>,
        ) {
            if change_detector.is_changed() {
                counter.0 += 1;
            }
        }

        let mut world = World::new();
        world.init_resource::<ChangeDetector>();
        world.init_resource::<Counter>();
        assert_eq!(*world.resource::<Counter>(), Counter(0));
        // Resources are changed when they are first added.
        world.run_system(count_up_iff_changed);
        assert_eq!(*world.resource::<Counter>(), Counter(1));
        // Nothing changed
        world.run_system(count_up_iff_changed);
        assert_eq!(*world.resource::<Counter>(), Counter(1));
        // Making a change
        world.resource_mut::<ChangeDetector>().set_changed();
        world.run_system(count_up_iff_changed);
        assert_eq!(*world.resource::<Counter>(), Counter(2));
    }

    #[test]
    fn local_variables() {
        // The `Local` begins at the default value of 0
        fn doubling(mut last_counter: Local<Counter>, mut counter: ResMut<Counter>) {
            counter.0 += last_counter.0;
            last_counter.0 = counter.0;
        }

        let mut world = World::new();
        world.insert_resource(Counter(1));
        assert_eq!(*world.resource::<Counter>(), Counter(1));
        world.run_system(doubling);
        assert_eq!(*world.resource::<Counter>(), Counter(1));
        world.run_system(doubling);
        assert_eq!(*world.resource::<Counter>(), Counter(2));
        world.run_system(doubling);
        assert_eq!(*world.resource::<Counter>(), Counter(4));
        world.run_system(doubling);
        assert_eq!(*world.resource::<Counter>(), Counter(8));
    }

    #[test]
    // This is a known limitation;
    // if this test passes the docs must be updated
    // to reflect the ability to chain run_system commands
    #[should_panic]
    fn system_recursion() {
        fn count_to_ten(mut counter: ResMut<Counter>, mut commands: Commands) {
            counter.0 += 1;
            if counter.0 < 10 {
                commands.run_system(count_to_ten);
            }
        }

        let mut world = World::new();
        world.init_resource::<Counter>();
        assert_eq!(*world.resource::<Counter>(), Counter(0));
        world.run_system(count_to_ten);
        assert_eq!(*world.resource::<Counter>(), Counter(10));
    }
}

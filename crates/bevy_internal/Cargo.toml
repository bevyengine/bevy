[package]
name = "bevy_internal"
version = "0.16.0-dev"
edition = "2021"
description = "An internal Bevy crate used to facilitate optional dynamic linking via the 'dynamic_linking' feature"
homepage = "https://bevyengine.org"
repository = "https://github.com/bevyengine/bevy"
license = "MIT OR Apache-2.0"
keywords = ["game", "engine", "gamedev", "graphics", "bevy"]
categories = ["game-engines", "graphics", "gui", "rendering"]

[features]
default = ["std", "async_executor", "bevy_log"]
default_no_std = ["edge_executor", "libm", "critical-section"]

# Optional Crates

## Enable animation support, and glTF animation loading
bevy_animation = ["std", "dep:bevy_animation"]

## Enable asset support
bevy_asset = ["std", "dep:bevy_asset"]

## Enables Bevy's core rendering pipeline
bevy_core_pipeline = ["std", "dep:bevy_core_pipeline", "bevy_image"]

# Provides a collection of developer tools
bevy_dev_tools = ["std", "dep:bevy_dev_tools"]

## Enables gizmo support
bevy_gizmos = ["std", "dep:bevy_gizmos", "bevy_image"]

## Enables GLTF support
bevy_gltf = ["std", "dep:bevy_gltf", "bevy_image"]

## Enables image support
bevy_image = ["std", "dep:bevy_image"]

# Enable input focus subsystem
bevy_input_focus = ["dep:bevy_input_focus"]

# Enable logging integration
bevy_log = ["std", "dep:bevy_log"]

## Enables physically based rendering support
bevy_pbr = ["std", "dep:bevy_pbr", "bevy_gizmos?/bevy_pbr", "bevy_image"]

# Provides picking functionality
bevy_picking = ["std", "dep:bevy_picking"]

# Enable support for the Bevy Remote Protocol
bevy_remote = ["std", "dep:bevy_remote", "serialize"]

## Enables Bevy's fundamental rendering functionality
bevy_render = [
  "std",
  "dep:bevy_render",
  "bevy_scene?/bevy_render",
  "bevy_gizmos?/bevy_render",
  "bevy_image",
]

## Enable sprite support
bevy_sprite = [
  "std",
  "dep:bevy_sprite",
  "bevy_gizmos?/bevy_sprite",
  "bevy_image",
]

# Enable built in global state machines
bevy_state = ["dep:bevy_state"]

## Enables text rendering support
bevy_text = ["std", "dep:bevy_text", "bevy_image"]

## Enables Bevy's UI library
bevy_ui = ["std", "dep:bevy_ui", "bevy_image"]

## Enables windowing support
bevy_window = ["dep:bevy_window", "dep:bevy_a11y"]

# Functionality

## Executor Backend (choose one)

### Uses `async-executor` as a task execution backend.
### This backend is incompatible with `no_std` targets.
async_executor = ["std", "bevy_tasks/async_executor", "bevy_ecs/async_executor"]

### Uses `edge-executor` as a task execution backend.
### Use this instead of `async-executor` if working on a `no_std` target.
edge_executor = ["bevy_tasks/edge_executor", "bevy_ecs/edge_executor"]

## Enables multithreading support within the engine, allowing systems and tasks to
## be scheduled across multiple threads.
multi_threaded = [
  "std",
  "bevy_asset?/multi_threaded",
  "bevy_ecs/multi_threaded",
  "bevy_render?/multi_threaded",
  "bevy_tasks/multi_threaded",
]

## Switches to using `async-io` as the backend for `block_on` calls.
async-io = ["std", "bevy_tasks/async-io"]

## Adds serialization support through `serde`.
serialize = [
  "bevy_a11y?/serialize",
  "bevy_color?/serialize",
  "bevy_ecs/serialize",
  "bevy_image?/serialize",
  "bevy_input/serialize",
  "bevy_math/serialize",
  "bevy_scene?/serialize",
  "bevy_time/serialize",
  "bevy_transform/serialize",
  "bevy_ui?/serialize",
  "bevy_window?/serialize",
  "bevy_winit?/serialize",
  "bevy_platform_support/serialize",
]

## Enable function reflection
reflect_functions = [
  "bevy_reflect/functions",
  "bevy_app/reflect_functions",
  "bevy_ecs/reflect_functions",
]

## Enables glTF animation loading
animation = ["bevy_animation", "bevy_gltf?/bevy_animation"]

## Display server protocol support (x11 is enabled by default)

### Wayland
wayland = ["bevy_winit/wayland"]

### X11
x11 = ["bevy_winit/x11"]

## Android activity support (choose one)

### Native Activity
android-native-activity = ["bevy_winit/android-native-activity"]

### Game Activity
android-game-activity = ["bevy_winit/android-game-activity"]

## Picking Backends

### Mesh Picking
bevy_mesh_picking_backend = [
  "bevy_picking",
  "bevy_picking/bevy_mesh_picking_backend",
]

### Sprite Picking
bevy_sprite_picking_backend = [
  "bevy_picking",
  "bevy_sprite/bevy_sprite_picking_backend",
]

### UI Picking
bevy_ui_picking_backend = ["bevy_picking", "bevy_ui/bevy_ui_picking_backend"]

## Asset hot-reloading

### Enables watching the filesystem
file_watcher = ["bevy_asset", "bevy_asset?/file_watcher"]

### Enables watching embedded files
embedded_watcher = ["bevy_asset", "bevy_asset?/embedded_watcher"]

### Enable winit custom cursor support
custom_cursor = ["bevy_winit/custom_cursor"]

## Enables a default-font provided by Bevy
default_font = ["bevy_text?/default_font"]

## Enables the built-in asset processor for processed assets.
asset_processor = ["bevy_asset", "bevy_asset?/asset_processor"]

## Audio format support (vorbis is enabled by default)

### Flac
flac = ["bevy_audio/flac"]

### MP3
mp3 = ["bevy_audio/mp3"]

### Vorbis
vorbis = ["bevy_audio/vorbis"]

### WAV
wav = ["bevy_audio/wav"]

### Mini MP3
minimp3 = ["bevy_audio/minimp3"]

### AAC (symphonia)
symphonia-aac = ["bevy_audio/symphonia-aac"]

### All (symphonia)
symphonia-all = ["bevy_audio/symphonia-all"]

### Flac (symphonia)
symphonia-flac = ["bevy_audio/symphonia-flac"]

### ISO MP4 (symphonia)
symphonia-isomp4 = ["bevy_audio/symphonia-isomp4"]

### Vorbis (symphonia)
symphonia-vorbis = ["bevy_audio/symphonia-vorbis"]

### WAV (symphonia)
symphonia-wav = ["bevy_audio/symphonia-wav"]

# Debugging Features

## Enable assertions to check the validity of parameters passed to glam
glam_assert = ["bevy_math/glam_assert"]

## Enable assertions in debug builds to check the validity of parameters passed to glam
debug_glam_assert = ["bevy_math/debug_glam_assert"]

## Enables source location tracking for change detection, which can assist with debugging
track_location = ["bevy_ecs/track_location"]

## Enable system stepping support
bevy_debug_stepping = [
  "bevy_ecs/bevy_debug_stepping",
  "bevy_app/bevy_debug_stepping",
]

## Enables `tracing` integration for more detailed logging.
trace = [
  "std",
  "bevy_log",
  "bevy_app/trace",
  "bevy_asset?/trace",
  "bevy_core_pipeline?/trace",
  "bevy_ecs/trace",
  "bevy_log?/trace",
  "bevy_pbr?/trace",
  "bevy_render?/trace",
  "bevy_winit?/trace",
]

## Enables more detailed tracing
detailed_trace = [
  "trace",
  "bevy_ecs/detailed_trace",
  "bevy_render?/detailed_trace",
]

## Enables Chrome compatibility with `tracing`
trace_chrome = ["bevy_log", "bevy_log?/tracing-chrome"]

## Enables Tracy compatibility
trace_tracy = [
  "bevy_log",
  "bevy_render?/tracing-tracy",
  "bevy_log?/tracing-tracy",
]

## Enables memory tracing via Tracy
trace_tracy_memory = ["bevy_log", "bevy_log?/trace_tracy_memory"]

## Provides diagnostic information about the system on supported platforms
sysinfo_plugin = ["bevy_diagnostic/sysinfo_plugin"]

# Provides a UI debug overlay
bevy_ui_debug = ["bevy_ui", "bevy_ui?/bevy_ui_debug"]

# Enable systems that allow for automated testing on CI
bevy_ci_testing = ["bevy_dev_tools/bevy_ci_testing", "bevy_render?/ci_limits"]

# Platform Compatibility

## Allows access to the `std` crate. Enabling this feature will prevent compilation
## on `no_std` targets, but provides access to certain additional features on
## supported platforms.
std = [
  "bevy_a11y?/std",
  "bevy_app/std",
  "bevy_diagnostic/std",
  "bevy_ecs/std",
  "bevy_input/std",
  "bevy_input_focus?/std",
  "bevy_math/std",
  "bevy_platform_support/std",
  "bevy_reflect/std",
  "bevy_state?/std",
  "bevy_time/std",
  "bevy_transform/std",
  "bevy_utils/std",
  "bevy_tasks/std",
  "bevy_window?/std",
]

## `critical-section` provides the building blocks for synchronization primitives
## on all platforms, including `no_std`.
critical-section = [
  "bevy_a11y?/critical-section",
  "bevy_app/critical-section",
  "bevy_diagnostic/critical-section",
  "bevy_ecs/critical-section",
  "bevy_input/critical-section",
  "bevy_input_focus?/critical-section",
  "bevy_platform_support/critical-section",
  "bevy_reflect/critical-section",
  "bevy_state?/critical-section",
  "bevy_time/critical-section",
  "bevy_utils/critical-section",
  "bevy_tasks/critical-section",
]

## `portable-atomic` provides additional platform support for atomic types and
## operations, even on targets without native support. 
portable-atomic = [
  "bevy_a11y?/portable-atomic",
  "bevy_app/portable-atomic",
  "bevy_diagnostic/portable-atomic",
  "bevy_ecs/portable-atomic",
  "bevy_input/portable-atomic",
  "bevy_input_focus?/portable-atomic",
  "bevy_platform_support/portable-atomic",
  "bevy_reflect/portable-atomic",
  "bevy_state?/portable-atomic",
  "bevy_time/portable-atomic",
  "bevy_utils/portable-atomic",
  "bevy_tasks/portable-atomic",
]

## Uses the `libm` maths library instead of the one provided in `std` and `core`.
libm = [
  "bevy_a11y?/libm",
  "bevy_input/libm",
  "bevy_input_focus?/libm",
  "bevy_math/libm",
  "bevy_transform/libm",
  "bevy_window?/libm",
]

## Enable support for the ios_simulator by downgrading some rendering capabilities
ios_simulator = ["bevy_pbr?/ios_simulator", "bevy_render?/ios_simulator"]

## Enable AccessKit on Unix backends
## (currently only works with experimental screen readers and forks.)
accesskit_unix = ["bevy_winit/accesskit_unix"]

# Linking

## Used to disable code that is unsupported when Bevy is dynamically linked
dynamic_linking = ["bevy_diagnostic/dynamic_linking"]

## Enable using a shared stdlib for cxx on Android.
android_shared_stdcxx = ["bevy_audio/android_shared_stdcxx"]

# Experimental (use at own risk!)

## Experimental support for nodes that are ignored for UI layouting
ghost_nodes = ["bevy_ui", "bevy_ui/ghost_nodes"]

## Percentage-closer soft shadows
experimental_pbr_pcss = ["bevy_pbr?/experimental_pbr_pcss"]

# Rendering Features

## Texture formats that have specific rendering support (HDR enabled by default)
basis-universal = ["bevy_image/basis-universal", "bevy_render/basis-universal"]
dds = [
  "bevy_image/dds",
  "bevy_render/dds",
  "bevy_core_pipeline/dds",
  "bevy_gltf/dds",
]
exr = ["bevy_image/exr", "bevy_render/exr"]
hdr = ["bevy_image/hdr", "bevy_render/hdr"]
ktx2 = ["bevy_image/ktx2", "bevy_render/ktx2"]

## For ktx2 supercompression
zlib = ["bevy_image/zlib"]
zstd = ["bevy_image/zstd"]

## Image format support (PNG enabled by default)
bmp = ["bevy_image/bmp"]
ff = ["bevy_image/ff"]
gif = ["bevy_image/gif"]
ico = ["bevy_image/ico"]
jpeg = ["bevy_image/jpeg"]
png = ["bevy_image/png"]
pnm = ["bevy_image/pnm"]
qoi = ["bevy_image/qoi"]
tga = ["bevy_image/tga"]
tiff = ["bevy_image/tiff"]
webp = ["bevy_image/webp"]

## Enable SPIR-V passthrough
spirv_shader_passthrough = ["bevy_render/spirv_shader_passthrough"]

## Include tonemapping LUT KTX2 files.
tonemapping_luts = ["bevy_core_pipeline/tonemapping_luts"]

## Include SMAA LUT KTX2 Files
smaa_luts = ["bevy_core_pipeline/smaa_luts"]

## Shader formats
shader_format_glsl = [
  "bevy_render/shader_format_glsl",
  "bevy_pbr?/shader_format_glsl",
]
shader_format_spirv = ["bevy_render/shader_format_spirv"]

## Transmission textures in `StandardMaterial`:
pbr_transmission_textures = [
  "bevy_pbr?/pbr_transmission_textures",
  "bevy_gltf?/pbr_transmission_textures",
]

## Multi-layer material textures in `StandardMaterial`:
pbr_multi_layer_material_textures = [
  "bevy_pbr?/pbr_multi_layer_material_textures",
  "bevy_gltf?/pbr_multi_layer_material_textures",
]

## Anisotropy texture in `StandardMaterial`:
pbr_anisotropy_texture = [
  "bevy_pbr?/pbr_anisotropy_texture",
  "bevy_gltf?/pbr_anisotropy_texture",
]

# Specular textures in `StandardMaterial`:
pbr_specular_textures = [
  "bevy_pbr?/pbr_specular_textures",
  "bevy_gltf?/pbr_specular_textures",
]

## Optimise for WebGL2
webgl = [
  "bevy_core_pipeline?/webgl",
  "bevy_pbr?/webgl",
  "bevy_render?/webgl",
  "bevy_gizmos?/webgl",
  "bevy_sprite?/webgl",
]

webgpu = [
  "bevy_core_pipeline?/webgpu",
  "bevy_pbr?/webgpu",
  "bevy_render?/webgpu",
  "bevy_gizmos?/webgpu",
  "bevy_sprite?/webgpu",
]

## Enables the meshlet renderer for dense high-poly scenes (experimental)
meshlet = ["bevy_pbr?/meshlet"]

## Enables processing meshes into meshlet meshes for bevy_pbr
meshlet_processor = ["bevy_pbr?/meshlet_processor"]

[dependencies]
# bevy (no_std)
bevy_app = { path = "../bevy_app", version = "0.16.0-dev", default-features = false, features = [
  "bevy_tasks",
  "bevy_reflect",
] }
bevy_derive = { path = "../bevy_derive", version = "0.16.0-dev", default-features = false }
bevy_diagnostic = { path = "../bevy_diagnostic", version = "0.16.0-dev", default-features = false }
bevy_ecs = { path = "../bevy_ecs", version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_input = { path = "../bevy_input", version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_math = { path = "../bevy_math", version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_platform_support = { path = "../bevy_platform_support", version = "0.16.0-dev", default-features = false, features = [
  "alloc",
] }
bevy_ptr = { path = "../bevy_ptr", version = "0.16.0-dev", default-features = false }
bevy_reflect = { path = "../bevy_reflect", version = "0.16.0-dev", default-features = false, features = [
  "bevy",
] }
bevy_time = { path = "../bevy_time", version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_transform = { path = "../bevy_transform", version = "0.16.0-dev", default-features = false, features = [
  "bevy-support",
  "bevy_reflect",
] }
bevy_utils = { path = "../bevy_utils", version = "0.16.0-dev", default-features = false, features = [
  "alloc",
] }
bevy_tasks = { path = "../bevy_tasks", version = "0.16.0-dev", default-features = false }

# bevy (std required)
bevy_log = { path = "../bevy_log", version = "0.16.0-dev", optional = true }

# bevy (optional)
bevy_a11y = { path = "../bevy_a11y", optional = true, version = "0.16.0-dev", features = [
  "bevy_reflect",
] }
bevy_animation = { path = "../bevy_animation", optional = true, version = "0.16.0-dev" }
bevy_asset = { path = "../bevy_asset", optional = true, version = "0.16.0-dev" }
bevy_audio = { path = "../bevy_audio", optional = true, version = "0.16.0-dev" }
bevy_color = { path = "../bevy_color", optional = true, version = "0.16.0-dev" }
bevy_core_pipeline = { path = "../bevy_core_pipeline", optional = true, version = "0.16.0-dev" }
bevy_dev_tools = { path = "../bevy_dev_tools", optional = true, version = "0.16.0-dev" }
bevy_gilrs = { path = "../bevy_gilrs", optional = true, version = "0.16.0-dev" }
bevy_gizmos = { path = "../bevy_gizmos", optional = true, version = "0.16.0-dev", default-features = false }
bevy_gltf = { path = "../bevy_gltf", optional = true, version = "0.16.0-dev" }
bevy_image = { path = "../bevy_image", optional = true, version = "0.16.0-dev" }
bevy_input_focus = { path = "../bevy_input_focus", optional = true, version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_pbr = { path = "../bevy_pbr", optional = true, version = "0.16.0-dev" }
bevy_picking = { path = "../bevy_picking", optional = true, version = "0.16.0-dev" }
bevy_remote = { path = "../bevy_remote", optional = true, version = "0.16.0-dev" }
bevy_render = { path = "../bevy_render", optional = true, version = "0.16.0-dev" }
bevy_scene = { path = "../bevy_scene", optional = true, version = "0.16.0-dev" }
bevy_sprite = { path = "../bevy_sprite", optional = true, version = "0.16.0-dev" }
bevy_state = { path = "../bevy_state", optional = true, version = "0.16.0-dev", default-features = false, features = [
  "bevy_app",
  "bevy_reflect",
] }
bevy_text = { path = "../bevy_text", optional = true, version = "0.16.0-dev" }
bevy_ui = { path = "../bevy_ui", optional = true, version = "0.16.0-dev" }
bevy_window = { path = "../bevy_window", optional = true, version = "0.16.0-dev", default-features = false, features = [
  "bevy_reflect",
] }
bevy_winit = { path = "../bevy_winit", optional = true, version = "0.16.0-dev" }

[lints]
workspace = true

[package.metadata.docs.rs]
rustdoc-args = ["-Zunstable-options", "--generate-link-to-definition"]
all-features = true

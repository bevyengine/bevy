use downcast_rs::{impl_downcast, Downcast};

/// A trait for types generated by the [`#[reflect_trait]`][0] attribute macro.
///
/// [0]: crate::reflect_trait
pub trait TypeData: Downcast + Send + Sync {
    fn clone_type_data(&self) -> Box<dyn TypeData>;
}
impl_downcast!(TypeData);

impl<T: 'static + Send + Sync> TypeData for T
where
    T: Clone,
{
    fn clone_type_data(&self) -> Box<dyn TypeData> {
        Box::new(self.clone())
    }
}

/// Trait used to generate [`TypeData`] for trait reflection.
///
/// This is used by the `#[derive(Reflect)]` macro to generate an implementation
/// of [`TypeData`] to pass to [`crate::TypeRegistration::insert`].
pub trait FromType<T> {
    fn from_type() -> Self;
}

/// A trait which can be used to specialize a blanket `FromType` implementation.
///
/// If implemented, the `#[derive(Reflect)]` macro will use this trait's
/// `specialized_from_type` method instead of `FromType::<T>::from_type()` to
/// generate a corresponding [`TypeData`] for `T`.
pub trait SpecializedFromType<T>: FromType<T> {
    fn specialized_from_type() -> Self;
}

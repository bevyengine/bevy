error[E0277]: `NoReflect` does not implement `Reflect` so cannot be fully reflected
  --> tests/reflect_derive/generics_fail.rs:LL:CC
   |
LL |     foo.get_field::<NoReflect>("a").unwrap();
   |         ---------   ^^^^^^^^^ the trait `Reflect` is not implemented for `NoReflect`
   |         |
   |         required by a bound introduced by this call
   |
    = note: consider annotating `NoReflect` with `#[derive(Reflect)]`
    = help: the following other types implement trait `Reflect`:
              &'static Location<'static>
              &'static Path
              &'static str
              ()
              (A, B)
              (A, B, C)
              (A, B, C, D)
              (A, B, C, D, E)
            and 80 others
note: required by a bound in `bevy_reflect::GetField::get_field`
  --> BEVY_ROOT/bevy_reflect/src/struct_trait.rs:LL:CC
   |
LL |     fn get_field<T: Reflect>(&self, name: &str) -> Option<&T>;
   |                     ^^^^^^^ required by this bound in `GetField::get_field`

error[E0277]: `NoReflect` does not implement `Typed` so cannot provide static type information
  --> tests/reflect_derive/generics_fail.rs:LL:CC
   |
LL |     let mut foo: Box<dyn Struct> = Box::new(Foo::<NoReflect> { a: NoReflect(42.0) });
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Typed` is not implemented for `NoReflect`
   |
   = note: consider annotating `NoReflect` with `#[derive(Reflect)]`
   = help: the following other types implement trait `Typed`:
             &'static Location<'static>
             &'static Path
             &'static str
             ()
             (A, B)
             (A, B, C)
             (A, B, C, D)
             (A, B, C, D, E)
           and 81 others
   = note: required for `NoReflect` to implement `MaybeTyped`
note: required for `Foo<NoReflect>` to implement `bevy_reflect::Struct`
  --> tests/reflect_derive/generics_fail.rs:LL:CC
   |
LL | #[derive(Reflect)]
   |          ^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
LL | #[reflect(from_reflect = false)]
LL | struct Foo<T> {
   |        ^^^^^^
   = note: required for the cast from `Box<Foo<NoReflect>>` to `Box<(dyn bevy_reflect::Struct + 'static)>`
   = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `NoReflect` does not implement `GetTypeRegistration` so cannot provide type registration information
  --> tests/reflect_derive/generics_fail.rs:LL:CC
   |
LL |     let mut foo: Box<dyn Struct> = Box::new(Foo::<NoReflect> { a: NoReflect(42.0) });
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `GetTypeRegistration` is not implemented for `NoReflect`
   |
   = note: consider annotating `NoReflect` with `#[derive(Reflect)]`
   = help: the following other types implement trait `GetTypeRegistration`:
             &'static Location<'static>
             &'static Path
             &'static str
             ()
             (A, B)
             (A, B, C)
             (A, B, C, D)
             (A, B, C, D, E)
           and 80 others
   = note: required for `NoReflect` to implement `RegisterForReflection`
note: required for `Foo<NoReflect>` to implement `bevy_reflect::Struct`
  --> tests/reflect_derive/generics_fail.rs:LL:CC
   |
LL | #[derive(Reflect)]
   |          ^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
LL | #[reflect(from_reflect = false)]
LL | struct Foo<T> {
   |        ^^^^^^
   = note: required for the cast from `Box<Foo<NoReflect>>` to `Box<(dyn bevy_reflect::Struct + 'static)>`
   = note: this error originates in the derive macro `Reflect` (in Nightly builds, run with -Z macro-backtrace for more info)

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0277`.

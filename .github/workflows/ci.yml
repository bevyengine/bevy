name: CI

permissions:
  contents: read

on:
  merge_group:
  pull_request:
  push:
    branches:
      - release-*

# Environment variables must be kept in sync with all workflows that defines them.
env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  # If nightly is breaking CI, modify this variable to target a specific nightly version.
  NIGHTLY_TOOLCHAIN: nightly
  RUSTFLAGS: "-D warnings"
  BINSTALL_VERSION: "v1.14.1"

concurrency:
  group: ${{github.workflow}}-${{github.ref}}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Build & run tests
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- test
        env:
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
        with:
          wayland: true
          xkb: true
      - name: CI job
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- lints

  miri:
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          components: miri
      - name: CI job
        # To run the tests one item at a time for troubleshooting, use
        # cargo --quiet test --lib -- --list | sed 's/: test$//' | MIRIFLAGS="-Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation" xargs -n1 cargo miri test -p bevy_ecs --lib -- --exact
        run: cargo miri test -p bevy_ecs --features bevy_utils/debug
        env:
          # -Zrandomize-layout makes sure we dont rely on the layout of anything that might change
          RUSTFLAGS: -Zrandomize-layout
          # https://github.com/rust-lang/miri#miri--z-flags-and-environment-variables
          # -Zmiri-disable-isolation is needed because our executor uses `fastrand` which accesses system time.
          # -Zmiri-ignore-leaks is necessary because a bunch of tests don't join all threads before finishing.
          MIRIFLAGS: -Zmiri-ignore-leaks -Zmiri-disable-isolation

  check-compiles:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Check Compile
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- compile

  check-compiles-no-std:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable-x86_64-unknown-none-${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable-x86_64-unknown-none-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable-x86_64-unknown-none-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-none
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Check Compile
        run: cargo check -p bevy --no-default-features --features default_no_std --target x86_64-unknown-none

  check-compiles-no-std-portable-atomic:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable-thumbv6m-none-eabi-${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable-thumbv6m-none-eabi-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable-thumbv6m-none-eabi-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: thumbv6m-none-eabi
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Check Compile
        run: cargo check -p bevy --no-default-features --features default_no_std --target thumbv6m-none-eabi

  check-compiles-no-std-examples:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: ci
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable-x86_64-unknown-none-${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable-x86_64-unknown-none-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable-x86_64-unknown-none-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-none
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Check Compile
        run: cd examples/no_std/library && cargo check --no-default-features --features libm,critical-section --target x86_64-unknown-none

  build-wasm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable-wasm32-unknown-unknown-${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable-wasm32-unknown-unknown-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable-wasm32-unknown-unknown-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown
      - name: Check wasm
        env:
          RUSTFLAGS: --cfg getrandom_backend="wasm_js"
        run: cargo check --target wasm32-unknown-unknown

  build-wasm-atomics:
    if: ${{ false }} # Disabled temporarily due to https://github.com/rust-lang/rust/issues/145101
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}-wasm32-unknown-unknown-${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}-wasm32-unknown-unknown-${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-${{ env.NIGHTLY_TOOLCHAIN }}-wasm32-unknown-unknown-
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.NIGHTLY_TOOLCHAIN }}
          targets: wasm32-unknown-unknown
          components: rust-src
      - name: Check wasm
        run: cargo check --target wasm32-unknown-unknown -Z build-std=std,panic_abort
        env:
          RUSTFLAGS: '-C target-feature=+atomics,+bulk-memory --cfg getrandom_backend="wasm_js"'

  markdownlint:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: check-missing-features-in-docs
    if: always()
    steps:
      - uses: actions/checkout@v5
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      - name: Run Markdown Lint
        uses: super-linter/super-linter/slim@v8.0.0
        env:
          MULTI_STATUS: false
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_MARKDOWN: true
          DEFAULT_BRANCH: main

  toml:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      # Update in sync with BINSTALL_VERSION
      - uses: cargo-bins/cargo-binstall@v1.14.1
      - name: Install taplo
        run: cargo binstall taplo-cli@0.9.3 --locked
      - name: Run Taplo
        id: taplo
        run: taplo fmt --check --diff
      - name: Taplo info
        if: failure()
        run: |
          echo 'To fix toml fmt, please run `taplo fmt`.'
          echo 'To check for a diff, run `taplo fmt --check --diff`.'
          echo 'You can find taplo here: https://taplo.tamasfe.dev/'
          echo 'Or if you use VSCode, use the `Even Better Toml` extension.'
          echo 'You can find the extension here: https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml'

  typos:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Check for typos
        uses: crate-ci/typos@v1.35.5
      - name: Typos info
        if: failure()
        run: |
          echo 'To fix typos, please run `typos -w`'
          echo 'To check for a diff, run `typos`'
          echo 'You can find typos here: https://crates.io/crates/typos'
          echo 'if you use VSCode, you can also install `Typos Spell Checker'
          echo 'You can find the extension here: https://marketplace.visualstudio.com/items?itemName=tekumara.typos-vscode'

  check-doc:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-stable--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-stable--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - uses: dtolnay/rust-toolchain@stable
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
        with:
          wayland: true
          xkb: true
      - name: Build and check doc
        # See tools/ci/src/main.rs for the commands this runs
        run: cargo run -p ci -- doc
        env:
          RUSTFLAGS: "-C debuginfo=0 -D warnings"
      # This currently report a lot of false positives
      # Enable it again once it's fixed - https://github.com/bevyengine/bevy/issues/1983
      # - name: Installs cargo-deadlinks
      #   run: cargo install --force cargo-deadlinks
      # - name: Checks dead links
      #   run: cargo deadlinks --dir target/doc/bevy
      #   continue-on-error: true

  check-missing-examples-in-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: check for missing metadata
        id: missing-metadata
        run: cargo run -p build-templated-pages -- check-missing examples
      - name: check for missing update
        run: cargo run -p build-templated-pages -- update examples
      - name: Check for modified files
        id: missing-update
        run: |
          echo "if this step fails, run the following command and commit the changed file on your PR."
          echo " > cargo run -p build-templated-pages -- update examples"
          git diff --quiet HEAD --
      - name: Save PR number
        if: ${{ failure() && github.event_name == 'pull_request' }}
        run: |
          mkdir -p ./missing-examples
          echo ${{ github.event.number }} > ./missing-examples/NR
      - name: log failed task - missing metadata
        if: ${{ failure() && github.event_name == 'pull_request' && steps.missing-metadata.conclusion == 'failure' }}
        run: touch ./missing-examples/missing-metadata
      - name: log failed task - missing update
        if: ${{ failure() && github.event_name == 'pull_request' && steps.missing-update.conclusion == 'failure' }}
        run: touch ./missing-examples/missing-update
      - uses: actions/upload-artifact@v4
        if: ${{ failure() && github.event_name == 'pull_request' }}
        with:
          name: missing-examples
          path: missing-examples/

  check-missing-features-in-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: check-missing-examples-in-docs
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: check for missing features
        id: missing-features
        run: cargo run -p build-templated-pages -- check-missing features
      - name: check for missing update
        run: cargo run -p build-templated-pages -- update features
      - name: Check for modified files
        id: missing-update
        run: |
          echo "if this step fails, run the following command and commit the changed file on your PR."
          echo " > cargo run -p build-templated-pages -- update features"
          git diff --quiet HEAD --
      - name: Save PR number
        if: ${{ failure() && github.event_name == 'pull_request' }}
        run: |
          mkdir -p ./missing-features
          echo ${{ github.event.number }} > ./missing-features/NR
      - name: log failed task - missing features
        if: ${{ failure() && github.event_name == 'pull_request' && steps.missing-features.conclusion == 'failure' }}
        run: touch ./missing-features/missing-features
      - name: log failed task - missing update
        if: ${{ failure() && github.event_name == 'pull_request' && steps.missing-update.conclusion == 'failure' }}
        run: touch ./missing-features/missing-update
      - uses: actions/upload-artifact@v4
        if: ${{ failure() && github.event_name == 'pull_request' }}
        with:
          name: missing-features
          path: missing-features/

  msrv:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: get MSRV
        id: msrv
        run: |
          msrv=`cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[] | select(.name=="bevy") | .rust_version'`
          echo "msrv=$msrv" >> $GITHUB_OUTPUT
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}
      - uses: actions/cache/restore@v4
        with:
          # key won't match, will rely on restore-keys
          key: ${{ runner.os }}-${{ steps.msrv.outputs.msrv }}--${{ hashFiles('**/Cargo.toml') }}-
          # See .github/workflows/validation-jobs.yml for how keys are generated
          restore-keys: |
            ${{ runner.os }}-${{ steps.msrv.outputs.msrv }}--${{ hashFiles('**/Cargo.toml') }}-
            ${{ runner.os }}-${{ steps.msrv.outputs.msrv }}--
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
      - name: Install Linux dependencies
        uses: ./.github/actions/install-linux-deps
      - name: Run cargo check
        id: check
        run: cargo check
      - name: Save PR number
        if: ${{ failure() && github.event_name == 'pull_request' && steps.check.conclusion == 'failure' }}
        run: |
          mkdir -p ./msrv
          echo ${{ github.event.number }} > ./msrv/NR
      - uses: actions/upload-artifact@v4
        if: ${{ failure() && github.event_name == 'pull_request' && steps.check.conclusion == 'failure' }}
        with:
          name: msrv
          path: msrv/

  check-bevy-internal-imports:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
      - name: Check for internal Bevy imports
        shell: bash
        run: |
          errors=""
          for file in $(find examples tests -name '*.rs' -not -path 'examples/mobile/*'); do
              if grep -q "use bevy_" "$file"; then
                  errors+="ERROR: Detected internal Bevy import in $file\n"
              fi
          done
          if [ -n "$errors" ]; then
              echo -e "$errors"
              echo " Avoid importing internal Bevy crates, they should not be used directly"
              echo " Fix the issue by replacing 'bevy_*' with 'bevy'"
              echo " Example: 'use bevy::sprite::Mesh2d;' instead of 'bevy_internal::sprite::Mesh2d;'"
              exit 1
          fi

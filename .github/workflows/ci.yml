name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches:
      - "*"

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash

jobs:
  pr:
    name: Pull request
    if: "github.event_name == 'pull_request'"
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        toolchain:
          - stable
          - nightly
          - 1.43.0 #msrv
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Install alsa
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev
      - name: Install udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libudev-dev
      - name: Run check
        run: cargo check
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"
      - name: Run test
        run: cargo test --workspace
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"
  
  master:
    name: Push
    # if: "github.event_name == 'push'"
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - windows-2019
          - macos-11.0
        toolchain:
          - stable
          - beta
          - nightly
          - 1.43.0
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Install alsa
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev
      - name: Install udev
        if: ${{ runner.os == 'Linux' }}
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libudev-dev
      - name: Run check
        uses: actions-rs/cargo@v1
        with:
          command: check
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"
      - name: Run test
        if: ${{ matrix.toolchain == 'stable' }}
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  build-wasm:
    name: Wasm
    # if: "github.event_name == 'push'"
    strategy:
      matrix:
        toolchain: [stable, nightly]
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    needs: lint
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          target: wasm32-unknown-unknown
          override: true
      - name: Run check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --target wasm32-unknown-unknown --no-default-features --features bevy_winit,x11,hdr,bevy_gltf
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-C debuginfo=0 -D warnings"

  # Not sure how to build with APK to multiple targets else it would be using
  # actions-rs/cargo@v1.
  build-android:
    name: Android
    # if: "github.event_name == 'push'"
    needs: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Android targets
      run: rustup target add aarch64-linux-android armv7-linux-androideabi
    - name: Install Cargo APK
      run: cargo install cargo-apk
    - name: Build APK
      run: cargo apk build --example android

  build-ios:
    name: iOS
    # if: "github.event_name == 'push'"
    needs: lint
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-lipo
          version: latest
      - name: Add iOS targets
        run: rustup target add aarch64-apple-ios x86_64-apple-ios
      - name: Build and install iOS app in iOS Simulator.
        run: cd examples/ios && make install

  lint:
    name: Lint
    strategy:
      matrix:
        os:
          - ubuntu-20.04
        toolchain:
          - nightly
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
          components: rustfmt, clippy
      - name: Install alsa
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev
      - name: Install udev
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libudev-dev
      - name: Check the format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      # type complexity must be ignored because we use huge templates for queries
      # -A clippy::manual-strip: strip_prefix support was added in 1.45. We want to support earlier versions of rust.
      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings -A clippy::type_complexity

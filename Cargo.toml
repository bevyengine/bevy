[package]
name = "bevy"
version = "0.12.0-dev"
edition = "2021"
categories = ["game-engines", "graphics", "gui", "rendering"]
description = "A refreshingly simple data-driven game engine and app framework"
exclude = ["assets/", "tools/", ".github/", "crates/", "examples/wasm/assets/"]
homepage = "https://bevyengine.org"
keywords = ["game", "engine", "gamedev", "graphics", "bevy"]
license = "MIT OR Apache-2.0"
readme = "README.md"
repository = "https://github.com/bevyengine/bevy"
rust-version = "1.70.0"

[workspace]
exclude = [
  "benches",
  "crates/bevy_ecs_compile_fail_tests",
  "crates/bevy_macros_compile_fail_tests",
  "crates/bevy_reflect_compile_fail_tests",
]
members = [
  "crates/*",
  "examples/mobile",
  "tools/ci",
  "tools/build-templated-pages",
  "tools/build-wasm-example",
  "tools/example-showcase",
  "errors",
]

[features]
default = [
  "animation",
  "bevy_asset",
  "bevy_audio",
  "bevy_gilrs",
  "bevy_scene",
  "bevy_winit",
  "bevy_core_pipeline",
  "bevy_pbr",
  "bevy_gltf",
  "bevy_render",
  "bevy_sprite",
  "bevy_text",
  "bevy_ui",
  "multi-threaded",
  "png",
  "hdr",
  "vorbis",
  "x11",
  "bevy_gizmos",
  "android_shared_stdcxx",
  "tonemapping_luts",
  "default_font",
  "webgl2",
]

# Force dynamic linking, which improves iterative compile times
dynamic_linking = ["dep:bevy_dylib", "bevy_internal/dynamic_linking"]

# Provides animation functionality
bevy_animation = ["bevy_internal/bevy_animation"]

# Provides asset functionality
bevy_asset = ["bevy_internal/bevy_asset"]

# Provides audio functionality
bevy_audio = ["bevy_internal/bevy_audio"]

# Provides cameras and other basic render pipeline features
bevy_core_pipeline = [
  "bevy_internal/bevy_core_pipeline",
  "bevy_asset",
  "bevy_render",
]

# Plugin for dynamic loading (using [libloading](https://crates.io/crates/libloading))
bevy_dynamic_plugin = ["bevy_internal/bevy_dynamic_plugin"]

# Adds gamepad support
bevy_gilrs = ["bevy_internal/bevy_gilrs"]

# [glTF](https://www.khronos.org/gltf/) support
bevy_gltf = ["bevy_internal/bevy_gltf", "bevy_asset", "bevy_scene", "bevy_pbr"]

# Adds PBR rendering
bevy_pbr = [
  "bevy_internal/bevy_pbr",
  "bevy_asset",
  "bevy_render",
  "bevy_core_pipeline",
]

# Provides rendering functionality
bevy_render = ["bevy_internal/bevy_render"]

# Provides scene functionality
bevy_scene = ["bevy_internal/bevy_scene", "bevy_asset"]

# Provides sprite functionality
bevy_sprite = ["bevy_internal/bevy_sprite", "bevy_render", "bevy_core_pipeline"]

# Provides text functionality
bevy_text = ["bevy_internal/bevy_text", "bevy_asset", "bevy_sprite"]

# A custom ECS-driven UI framework
bevy_ui = [
  "bevy_internal/bevy_ui",
  "bevy_core_pipeline",
  "bevy_text",
  "bevy_sprite",
]

# winit window and input backend
bevy_winit = ["bevy_internal/bevy_winit"]

# Adds support for rendering gizmos
bevy_gizmos = ["bevy_internal/bevy_gizmos"]

# Tracing support, saving a file in Chrome Tracing format
trace_chrome = ["trace", "bevy_internal/trace_chrome"]

# Tracing support, exposing a port for Tracy
trace_tracy = ["trace", "bevy_internal/trace_tracy"]

# Tracing support, with memory profiling, exposing a port for Tracy
trace_tracy_memory = [
  "trace",
  "bevy_internal/trace_tracy",
  "bevy_internal/trace_tracy_memory",
]

# Tracing support
trace = ["bevy_internal/trace"]

# Save a trace of all wgpu calls
wgpu_trace = ["bevy_internal/wgpu_trace"]

# EXR image format support
exr = ["bevy_internal/exr"]

# HDR image format support
hdr = ["bevy_internal/hdr"]

# PNG image format support
png = ["bevy_internal/png"]

# TGA image format support
tga = ["bevy_internal/tga"]

# JPEG image format support
jpeg = ["bevy_internal/jpeg"]

# BMP image format support
bmp = ["bevy_internal/bmp"]

# WebP image format support
webp = ["bevy_internal/webp"]

# Basis Universal compressed texture support
basis-universal = ["bevy_internal/basis-universal"]

# DDS compressed texture support
dds = ["bevy_internal/dds"]

# KTX2 compressed texture support
ktx2 = ["bevy_internal/ktx2"]

# PNM image format support, includes pam, pbm, pgm and ppm
pnm = ["bevy_internal/pnm"]

# For KTX2 supercompression
zlib = ["bevy_internal/zlib"]

# For KTX2 supercompression
zstd = ["bevy_internal/zstd"]

# FLAC audio format support
flac = ["bevy_internal/flac"]

# MP3 audio format support
mp3 = ["bevy_internal/mp3"]

# OGG/VORBIS audio format support
vorbis = ["bevy_internal/vorbis"]

# WAV audio format support
wav = ["bevy_internal/wav"]

# MP3 audio format support (through minimp3)
minimp3 = ["bevy_internal/minimp3"]

# AAC audio format support (through symphonia)
symphonia-aac = ["bevy_internal/symphonia-aac"]

# AAC, FLAC, MP3, MP4, OGG/VORBIS, and WAV audio formats support (through symphonia)
symphonia-all = ["bevy_internal/symphonia-all"]

# FLAC audio format support (through symphonia)
symphonia-flac = ["bevy_internal/symphonia-flac"]

# MP4 audio format support (through symphonia)
symphonia-isomp4 = ["bevy_internal/symphonia-isomp4"]

# OGG/VORBIS audio format support (through symphonia)
symphonia-vorbis = ["bevy_internal/symphonia-vorbis"]

# WAV audio format support (through symphonia)
symphonia-wav = ["bevy_internal/symphonia-wav"]

# Enable serialization support through serde
serialize = ["bevy_internal/serialize"]

# Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.
multi-threaded = ["bevy_internal/multi-threaded"]

# Use async-io's implementation of block_on instead of futures-lite's implementation. This is preferred if your application uses async-io.
async-io = ["bevy_internal/async-io"]

# Wayland display server support
wayland = ["bevy_internal/wayland"]

# X11 display server support
x11 = ["bevy_internal/x11"]

# Enable rendering of font glyphs using subpixel accuracy
subpixel_glyph_atlas = ["bevy_internal/subpixel_glyph_atlas"]

# Enable systems that allow for automated testing on CI
bevy_ci_testing = ["bevy_internal/bevy_ci_testing"]

# Enable animation support, and glTF animation loading
animation = ["bevy_internal/animation", "bevy_animation"]

# Enable using a shared stdlib for cxx on Android
android_shared_stdcxx = ["bevy_internal/android_shared_stdcxx"]

# Enable detailed trace event logging. These trace events are expensive even when off, thus they require compile time opt-in
detailed_trace = ["bevy_internal/detailed_trace"]

# Include tonemapping Look Up Tables KTX2 files. If everything is pink, you need to enable this feature or change the `Tonemapping` method on your `Camera2dBundle` or `Camera3dBundle`.
tonemapping_luts = ["bevy_internal/tonemapping_luts", "ktx2", "zstd"]

# Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)
accesskit_unix = ["bevy_internal/accesskit_unix"]

# Enable assertions to check the validity of parameters passed to glam
glam_assert = ["bevy_internal/glam_assert"]

# Enable assertions in debug builds to check the validity of parameters passed to glam
debug_glam_assert = ["bevy_internal/debug_glam_assert"]

# Include a default font, containing only ASCII characters, at the cost of a 20kB binary size increase
default_font = ["bevy_internal/default_font"]

# Enable support for shaders in GLSL
shader_format_glsl = ["bevy_internal/shader_format_glsl"]

# Enable support for shaders in SPIR-V
shader_format_spirv = ["bevy_internal/shader_format_spirv"]

# Enable support for transmission-related textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs
pbr_transmission_textures = ["bevy_internal/pbr_transmission_textures"]

# Enable some limitations to be able to use WebGL2. If not enabled, it will default to WebGPU in Wasm. Please refer to the [WebGL2 and WebGPU](https://github.com/bevyengine/bevy/tree/latest/examples#webgl2-and-webgpu) section of the examples README for more information on how to run Wasm builds with WebGPU.
webgl2 = ["bevy_internal/webgl"]

# Enables the built-in asset processor for processed assets.
asset_processor = ["bevy_internal/asset_processor"]

# Enables watching the filesystem for Bevy Asset hot-reloading
file_watcher = ["bevy_internal/file_watcher"]

# Enables watching in memory asset providers for Bevy Asset hot-reloading
embedded_watcher = ["bevy_internal/embedded_watcher"]

[dependencies]
bevy_dylib = { path = "crates/bevy_dylib", version = "0.12.0-dev", default-features = false, optional = true }
bevy_internal = { path = "crates/bevy_internal", version = "0.12.0-dev", default-features = false }

[dev-dependencies]
rand = "0.8.0"
ron = "0.8.0"
serde = { version = "1", features = ["derive"] }
bytemuck = "1.7"
# Needed to poll Task examples
futures-lite = "1.11.3"
crossbeam-channel = "0.5.0"
argh = "0.1.12"

[[example]]
name = "hello_world"
path = "examples/hello_world.rs"
doc-scrape-examples = true

[package.metadata.example.hello_world]
hidden = true

# 2D Rendering
[[example]]
name = "bloom_2d"
path = "examples/2d/bloom_2d.rs"
doc-scrape-examples = true

[package.metadata.example.bloom_2d]
name = "2D Bloom"
description = "Illustrates bloom post-processing in 2d"
category = "2D Rendering"
wasm = true

[[example]]
name = "move_sprite"
path = "examples/2d/move_sprite.rs"
doc-scrape-examples = true

[package.metadata.example.move_sprite]
name = "Move Sprite"
description = "Changes the transform of a sprite"
category = "2D Rendering"
wasm = true

[[example]]
name = "2d_viewport_to_world"
path = "examples/2d/2d_viewport_to_world.rs"

[package.metadata.example.2d_viewport_to_world]
name = "2D Viewport To World"
description = "Demonstrates how to use the `Camera::viewport_to_world_2d` method"
category = "2D Rendering"
wasm = true

[[example]]
name = "rotation"
path = "examples/2d/rotation.rs"
doc-scrape-examples = true

[package.metadata.example.rotation]
name = "2D Rotation"
description = "Demonstrates rotating entities in 2D with quaternions"
category = "2D Rendering"
wasm = true

[[example]]
name = "mesh2d"
path = "examples/2d/mesh2d.rs"
doc-scrape-examples = true

[package.metadata.example.mesh2d]
name = "Mesh 2D"
description = "Renders a 2d mesh"
category = "2D Rendering"
wasm = true

[[example]]
name = "mesh2d_manual"
path = "examples/2d/mesh2d_manual.rs"
doc-scrape-examples = true

[package.metadata.example.mesh2d_manual]
name = "Manual Mesh 2D"
description = "Renders a custom mesh \"manually\" with \"mid-level\" renderer apis"
category = "2D Rendering"
wasm = true

[[example]]
name = "mesh2d_vertex_color_texture"
path = "examples/2d/mesh2d_vertex_color_texture.rs"
doc-scrape-examples = true

[package.metadata.example.mesh2d_vertex_color_texture]
name = "Mesh 2D With Vertex Colors"
description = "Renders a 2d mesh with vertex color attributes"
category = "2D Rendering"
wasm = true

[[example]]
name = "2d_shapes"
path = "examples/2d/2d_shapes.rs"
doc-scrape-examples = true

[package.metadata.example.2d_shapes]
name = "2D Shapes"
description = "Renders a rectangle, circle, and hexagon"
category = "2D Rendering"
wasm = true

[[example]]
name = "custom_gltf_vertex_attribute"
path = "examples/2d/custom_gltf_vertex_attribute.rs"
doc-scrape-examples = true

[package.metadata.example.custom_gltf_vertex_attribute]
name = "Custom glTF vertex attribute 2D"
description = "Renders a glTF mesh in 2D with a custom vertex attribute"
category = "2D Rendering"
wasm = true

[[example]]
name = "2d_gizmos"
path = "examples/2d/2d_gizmos.rs"
doc-scrape-examples = true

[package.metadata.example.2d_gizmos]
name = "2D Gizmos"
description = "A scene showcasing 2D gizmos"
category = "2D Rendering"
wasm = true

[[example]]
name = "sprite"
path = "examples/2d/sprite.rs"
doc-scrape-examples = true

[package.metadata.example.sprite]
name = "Sprite"
description = "Renders a sprite"
category = "2D Rendering"
wasm = true

[[example]]
name = "sprite_flipping"
path = "examples/2d/sprite_flipping.rs"
doc-scrape-examples = true

[package.metadata.example.sprite_flipping]
name = "Sprite Flipping"
description = "Renders a sprite flipped along an axis"
category = "2D Rendering"
wasm = true

[[example]]
name = "sprite_sheet"
path = "examples/2d/sprite_sheet.rs"
doc-scrape-examples = true

[package.metadata.example.sprite_sheet]
name = "Sprite Sheet"
description = "Renders an animated sprite"
category = "2D Rendering"
wasm = true

[[example]]
name = "text2d"
path = "examples/2d/text2d.rs"
doc-scrape-examples = true

[package.metadata.example.text2d]
name = "Text 2D"
description = "Generates text in 2D"
category = "2D Rendering"
wasm = true

[[example]]
name = "texture_atlas"
path = "examples/2d/texture_atlas.rs"
doc-scrape-examples = true

[package.metadata.example.texture_atlas]
name = "Texture Atlas"
description = "Generates a texture atlas (sprite sheet) from individual sprites"
category = "2D Rendering"
wasm = false

[[example]]
name = "transparency_2d"
path = "examples/2d/transparency_2d.rs"
doc-scrape-examples = true

[package.metadata.example.transparency_2d]
name = "Transparency in 2D"
description = "Demonstrates transparency in 2d"
category = "2D Rendering"
wasm = true

[[example]]
name = "pixel_perfect"
path = "examples/2d/pixel_perfect.rs"
doc-scrape-examples = true

[package.metadata.example.pixel_perfect]
name = "Pixel Perfect"
description = "Demonstrates pixel perfect in 2d"
category = "2D Rendering"
wasm = true

# 3D Rendering
[[example]]
name = "3d_scene"
path = "examples/3d/3d_scene.rs"
doc-scrape-examples = true

[package.metadata.example.3d_scene]
name = "3D Scene"
description = "Simple 3D scene with basic shapes and lighting"
category = "3D Rendering"
wasm = true

[[example]]
name = "3d_shapes"
path = "examples/3d/3d_shapes.rs"
doc-scrape-examples = true

[package.metadata.example.3d_shapes]
name = "3D Shapes"
description = "A scene showcasing the built-in 3D shapes"
category = "3D Rendering"
wasm = true

[[example]]
name = "3d_viewport_to_world"
path = "examples/3d/3d_viewport_to_world.rs"
doc-scrape-examples = true

[package.metadata.example.3d_viewport_to_world]
name = "3D Viewport To World"
description = "Demonstrates how to use the `Camera::viewport_to_world` method"
category = "3D Rendering"
wasm = true

[[example]]
name = "generate_custom_mesh"
path = "examples/3d/generate_custom_mesh.rs"
doc-scrape-examples = true

[package.metadata.example.generate_custom_mesh]
name = "Generate Custom Mesh"
description = "Simple showcase of how to generate a custom mesh with a custom texture"
category = "3D Rendering"
wasm = true

[[example]]
name = "anti_aliasing"
path = "examples/3d/anti_aliasing.rs"
doc-scrape-examples = true

[package.metadata.example.anti_aliasing]
name = "Anti-aliasing"
description = "Compares different anti-aliasing methods"
category = "3D Rendering"
wasm = false

[[example]]
name = "3d_gizmos"
path = "examples/3d/3d_gizmos.rs"
doc-scrape-examples = true

[package.metadata.example.3d_gizmos]
name = "3D Gizmos"
description = "A scene showcasing 3D gizmos"
category = "3D Rendering"
wasm = true

[[example]]
name = "atmospheric_fog"
path = "examples/3d/atmospheric_fog.rs"
doc-scrape-examples = true

[package.metadata.example.atmospheric_fog]
name = "Atmospheric Fog"
description = "A scene showcasing the atmospheric fog effect"
category = "3D Rendering"
wasm = true

[[example]]
name = "fog"
path = "examples/3d/fog.rs"
doc-scrape-examples = true

[package.metadata.example.fog]
name = "Fog"
description = "A scene showcasing the distance fog effect"
category = "3D Rendering"
wasm = true

[[example]]
name = "blend_modes"
path = "examples/3d/blend_modes.rs"
doc-scrape-examples = true

[package.metadata.example.blend_modes]
name = "Blend Modes"
description = "Showcases different blend modes"
category = "3D Rendering"
wasm = true

[[example]]
name = "lighting"
path = "examples/3d/lighting.rs"
doc-scrape-examples = true

[package.metadata.example.lighting]
name = "Lighting"
description = "Illustrates various lighting options in a simple scene"
category = "3D Rendering"
wasm = true

[[example]]
name = "lines"
path = "examples/3d/lines.rs"
doc-scrape-examples = true

[package.metadata.example.lines]
name = "Lines"
description = "Create a custom material to draw 3d lines"
category = "3D Rendering"
wasm = true

[[example]]
name = "ssao"
path = "examples/3d/ssao.rs"
doc-scrape-examples = true

[package.metadata.example.ssao]
name = "Screen Space Ambient Occlusion"
description = "A scene showcasing screen space ambient occlusion"
category = "3D Rendering"
wasm = false

[[example]]
name = "spotlight"
path = "examples/3d/spotlight.rs"
doc-scrape-examples = true

[package.metadata.example.spotlight]
name = "Spotlight"
description = "Illustrates spot lights"
category = "3D Rendering"
wasm = true

[[example]]
name = "bloom_3d"
path = "examples/3d/bloom_3d.rs"
doc-scrape-examples = true

[package.metadata.example.bloom_3d]
name = "3D Bloom"
description = "Illustrates bloom configuration using HDR and emissive materials"
category = "3D Rendering"
wasm = true

[[example]]
name = "deferred_rendering"
path = "examples/3d/deferred_rendering.rs"

[package.metadata.example.deferred_rendering]
name = "Deferred Rendering"
description = "Renders meshes with both forward and deferred pipelines"
category = "3D Rendering"
wasm = true

[[example]]
name = "load_gltf"
path = "examples/3d/load_gltf.rs"
doc-scrape-examples = true

[package.metadata.example.load_gltf]
name = "Load glTF"
description = "Loads and renders a glTF file as a scene"
category = "3D Rendering"
wasm = true

[[example]]
name = "tonemapping"
path = "examples/3d/tonemapping.rs"
doc-scrape-examples = true

[package.metadata.example.tonemapping]
name = "Tonemapping"
description = "Compares tonemapping options"
category = "3D Rendering"
wasm = true

[[example]]
name = "orthographic"
path = "examples/3d/orthographic.rs"
doc-scrape-examples = true

[package.metadata.example.orthographic]
name = "Orthographic View"
description = "Shows how to create a 3D orthographic view (for isometric-look in games or CAD applications)"
category = "3D Rendering"
wasm = true

[[example]]
name = "parenting"
path = "examples/3d/parenting.rs"
doc-scrape-examples = true

[package.metadata.example.parenting]
name = "Parenting"
description = "Demonstrates parent->child relationships and relative transformations"
category = "3D Rendering"
wasm = true

[[example]]
name = "pbr"
path = "examples/3d/pbr.rs"
doc-scrape-examples = true

[package.metadata.example.pbr]
name = "Physically Based Rendering"
description = "Demonstrates use of Physically Based Rendering (PBR) properties"
category = "3D Rendering"
wasm = true

[[example]]
name = "parallax_mapping"
path = "examples/3d/parallax_mapping.rs"
doc-scrape-examples = true

[package.metadata.example.parallax_mapping]
name = "Parallax Mapping"
description = "Demonstrates use of a normal map and depth map for parallax mapping"
category = "3D Rendering"
wasm = true

[[example]]
name = "render_to_texture"
path = "examples/3d/render_to_texture.rs"
doc-scrape-examples = true

[package.metadata.example.render_to_texture]
name = "Render to Texture"
description = "Shows how to render to a texture, useful for mirrors, UI, or exporting images"
category = "3D Rendering"
wasm = true

[[example]]
name = "shadow_biases"
path = "examples/3d/shadow_biases.rs"
doc-scrape-examples = true

[package.metadata.example.shadow_biases]
name = "Shadow Biases"
description = "Demonstrates how shadow biases affect shadows in a 3d scene"
category = "3D Rendering"
wasm = true

[[example]]
name = "shadow_caster_receiver"
path = "examples/3d/shadow_caster_receiver.rs"
doc-scrape-examples = true

[package.metadata.example.shadow_caster_receiver]
name = "Shadow Caster and Receiver"
description = "Demonstrates how to prevent meshes from casting/receiving shadows in a 3d scene"
category = "3D Rendering"
wasm = true

[[example]]
name = "skybox"
path = "examples/3d/skybox.rs"
doc-scrape-examples = true

[package.metadata.example.skybox]
name = "Skybox"
description = "Load a cubemap texture onto a cube like a skybox and cycle through different compressed texture formats."
category = "3D Rendering"
wasm = false

[[example]]
name = "spherical_area_lights"
path = "examples/3d/spherical_area_lights.rs"
doc-scrape-examples = true

[package.metadata.example.spherical_area_lights]
name = "Spherical Area Lights"
description = "Demonstrates how point light radius values affect light behavior"
category = "3D Rendering"
wasm = true

[[example]]
name = "split_screen"
path = "examples/3d/split_screen.rs"
doc-scrape-examples = true

[package.metadata.example.split_screen]
name = "Split Screen"
description = "Demonstrates how to render two cameras to the same window to accomplish \"split screen\""
category = "3D Rendering"
wasm = true

[[example]]
name = "texture"
path = "examples/3d/texture.rs"
doc-scrape-examples = true

[package.metadata.example.texture]
name = "Texture"
description = "Shows configuration of texture materials"
category = "3D Rendering"
wasm = true

[[example]]
name = "transparency_3d"
path = "examples/3d/transparency_3d.rs"
doc-scrape-examples = true

[package.metadata.example.transparency_3d]
name = "Transparency in 3D"
description = "Demonstrates transparency in 3d"
category = "3D Rendering"
wasm = true

[[example]]
name = "transmission"
path = "examples/3d/transmission.rs"

[package.metadata.example.transmission]
name = "Transmission"
description = "Showcases light transmission in the PBR material"
category = "3D Rendering"
wasm = true

[[example]]
name = "two_passes"
path = "examples/3d/two_passes.rs"
doc-scrape-examples = true

[package.metadata.example.two_passes]
name = "Two Passes"
description = "Renders two 3d passes to the same window from different perspectives"
category = "3D Rendering"
wasm = true

[[example]]
name = "update_gltf_scene"
path = "examples/3d/update_gltf_scene.rs"
doc-scrape-examples = true

[package.metadata.example.update_gltf_scene]
name = "Update glTF Scene"
description = "Update a scene from a glTF file, either by spawning the scene as a child of another entity, or by accessing the entities of the scene"
category = "3D Rendering"
wasm = true

[[example]]
name = "vertex_colors"
path = "examples/3d/vertex_colors.rs"
doc-scrape-examples = true

[package.metadata.example.vertex_colors]
name = "Vertex Colors"
description = "Shows the use of vertex colors"
category = "3D Rendering"
wasm = true

[[example]]
name = "wireframe"
path = "examples/3d/wireframe.rs"
doc-scrape-examples = true

[package.metadata.example.wireframe]
name = "Wireframe"
description = "Showcases wireframe rendering"
category = "3D Rendering"
wasm = false

[[example]]
name = "no_prepass"
path = "tests/3d/no_prepass.rs"
doc-scrape-examples = true

[package.metadata.example.no_prepass]
hidden = true

# Animation
[[example]]
name = "animated_fox"
path = "examples/animation/animated_fox.rs"
doc-scrape-examples = true

[package.metadata.example.animated_fox]
name = "Animated Fox"
description = "Plays an animation from a skinned glTF"
category = "Animation"
wasm = true

[[example]]
name = "morph_targets"
path = "examples/animation/morph_targets.rs"
doc-scrape-examples = true

[package.metadata.example.morph_targets]
name = "Morph Targets"
description = "Plays an animation from a glTF file with meshes with morph targets"
category = "Animation"
wasm = true

[[example]]
name = "animated_transform"
path = "examples/animation/animated_transform.rs"
doc-scrape-examples = true

[package.metadata.example.animated_transform]
name = "Animated Transform"
description = "Create and play an animation defined by code that operates on the `Transform` component"
category = "Animation"
wasm = true

[[example]]
name = "cubic_curve"
path = "examples/animation/cubic_curve.rs"
doc-scrape-examples = true

[package.metadata.example.cubic_curve]
name = "Cubic Curve"
description = "Bezier curve example showing a cube following a cubic curve"
category = "Animation"
wasm = true

[[example]]
name = "custom_skinned_mesh"
path = "examples/animation/custom_skinned_mesh.rs"
doc-scrape-examples = true

[package.metadata.example.custom_skinned_mesh]
name = "Custom Skinned Mesh"
description = "Skinned mesh example with mesh and joints data defined in code"
category = "Animation"
wasm = true

[[example]]
name = "gltf_skinned_mesh"
path = "examples/animation/gltf_skinned_mesh.rs"
doc-scrape-examples = true

[package.metadata.example.gltf_skinned_mesh]
name = "glTF Skinned Mesh"
description = "Skinned mesh example with mesh and joints data loaded from a glTF file"
category = "Animation"
wasm = true

# Application
[[example]]
name = "custom_loop"
path = "examples/app/custom_loop.rs"
doc-scrape-examples = true

[package.metadata.example.custom_loop]
name = "Custom Loop"
description = "Demonstrates how to create a custom runner (to update an app manually)"
category = "Application"
wasm = false

[[example]]
name = "drag_and_drop"
path = "examples/app/drag_and_drop.rs"
doc-scrape-examples = true

[package.metadata.example.drag_and_drop]
name = "Drag and Drop"
description = "An example that shows how to handle drag and drop in an app"
category = "Application"
wasm = false

[[example]]
name = "empty"
path = "examples/app/empty.rs"
doc-scrape-examples = true

[package.metadata.example.empty]
name = "Empty"
description = "An empty application (does nothing)"
category = "Application"
wasm = false

[[example]]
name = "empty_defaults"
path = "examples/app/empty_defaults.rs"
doc-scrape-examples = true

[package.metadata.example.empty_defaults]
name = "Empty with Defaults"
description = "An empty application with default plugins"
category = "Application"
wasm = true

[[example]]
name = "headless"
path = "examples/app/headless.rs"
doc-scrape-examples = true

[package.metadata.example.headless]
name = "Headless"
description = "An application that runs without default plugins"
category = "Application"
wasm = false

[[example]]
name = "logs"
path = "examples/app/logs.rs"
doc-scrape-examples = true

[package.metadata.example.logs]
name = "Logs"
description = "Illustrate how to use generate log output"
category = "Application"
wasm = true

[[example]]
name = "plugin"
path = "examples/app/plugin.rs"
doc-scrape-examples = true

[package.metadata.example.plugin]
name = "Plugin"
description = "Demonstrates the creation and registration of a custom plugin"
category = "Application"
wasm = true

[[example]]
name = "plugin_group"
path = "examples/app/plugin_group.rs"
doc-scrape-examples = true

[package.metadata.example.plugin_group]
name = "Plugin Group"
description = "Demonstrates the creation and registration of a custom plugin group"
category = "Application"
wasm = true

[[example]]
name = "return_after_run"
path = "examples/app/return_after_run.rs"
doc-scrape-examples = true

[package.metadata.example.return_after_run]
name = "Return after Run"
description = "Show how to return to main after the Bevy app has exited"
category = "Application"
wasm = false

[[example]]
name = "thread_pool_resources"
path = "examples/app/thread_pool_resources.rs"
doc-scrape-examples = true

[package.metadata.example.thread_pool_resources]
name = "Thread Pool Resources"
description = "Creates and customizes the internal thread pool"
category = "Application"
wasm = false

[[example]]
name = "no_renderer"
path = "examples/app/no_renderer.rs"
doc-scrape-examples = true

[package.metadata.example.no_renderer]
name = "No Renderer"
description = "An application that runs with default plugins and displays an empty window, but without an actual renderer"
category = "Application"
wasm = false

[[example]]
name = "without_winit"
path = "examples/app/without_winit.rs"
doc-scrape-examples = true

[package.metadata.example.without_winit]
name = "Without Winit"
description = "Create an application without winit (runs single time, no event loop)"
category = "Application"
wasm = false

# Assets
[[example]]
name = "asset_loading"
path = "examples/asset/asset_loading.rs"
doc-scrape-examples = true

[package.metadata.example.asset_loading]
name = "Asset Loading"
description = "Demonstrates various methods to load assets"
category = "Assets"
wasm = false

[[example]]
name = "custom_asset"
path = "examples/asset/custom_asset.rs"
doc-scrape-examples = true

[package.metadata.example.custom_asset]
name = "Custom Asset"
description = "Implements a custom asset loader"
category = "Assets"
wasm = true

[[example]]
name = "custom_asset_reader"
path = "examples/asset/custom_asset_reader.rs"
doc-scrape-examples = true

[package.metadata.example.custom_asset_reader]
name = "Custom Asset IO"
description = "Implements a custom AssetReader"
category = "Assets"
wasm = true

[[example]]
name = "hot_asset_reloading"
path = "examples/asset/hot_asset_reloading.rs"
doc-scrape-examples = true
required-features = ["file_watcher"]

[package.metadata.example.hot_asset_reloading]
name = "Hot Reloading of Assets"
description = "Demonstrates automatic reloading of assets when modified on disk"
category = "Assets"
wasm = true

[[example]]
name = "asset_processing"
path = "examples/asset/processing/asset_processing.rs"
doc-scrape-examples = true
required-features = ["file_watcher", "asset_processor"]

[package.metadata.example.asset_processing]
name = "Asset Processing"
description = "Demonstrates how to process and load custom assets"
category = "Assets"
wasm = false

# Async Tasks
[[example]]
name = "async_compute"
path = "examples/async_tasks/async_compute.rs"
doc-scrape-examples = true

[package.metadata.example.async_compute]
name = "Async Compute"
description = "How to use `AsyncComputeTaskPool` to complete longer running tasks"
category = "Async Tasks"
wasm = false

[[example]]
name = "external_source_external_thread"
path = "examples/async_tasks/external_source_external_thread.rs"
doc-scrape-examples = true

[package.metadata.example.external_source_external_thread]
name = "External Source of Data on an External Thread"
description = "How to use an external thread to run an infinite task and communicate with a channel"
category = "Async Tasks"
wasm = false

# Audio
[[example]]
name = "audio"
path = "examples/audio/audio.rs"
doc-scrape-examples = true

[package.metadata.example.audio]
name = "Audio"
description = "Shows how to load and play an audio file"
category = "Audio"
wasm = true

[[example]]
name = "audio_control"
path = "examples/audio/audio_control.rs"
doc-scrape-examples = true

[package.metadata.example.audio_control]
name = "Audio Control"
description = "Shows how to load and play an audio file, and control how it's played"
category = "Audio"
wasm = true

[[example]]
name = "decodable"
path = "examples/audio/decodable.rs"
doc-scrape-examples = true

[package.metadata.example.decodable]
name = "Decodable"
description = "Shows how to create and register a custom audio source by implementing the `Decodable` type."
category = "Audio"
wasm = true

[[example]]
name = "spatial_audio_2d"
path = "examples/audio/spatial_audio_2d.rs"
doc-scrape-examples = true

[package.metadata.example.spatial_audio_2d]
name = "Spatial Audio 2D"
description = "Shows how to play spatial audio, and moving the emitter in 2D"
category = "Audio"
wasm = true

[[example]]
name = "spatial_audio_3d"
path = "examples/audio/spatial_audio_3d.rs"
doc-scrape-examples = true

[package.metadata.example.spatial_audio_3d]
name = "Spatial Audio 3D"
description = "Shows how to play spatial audio, and moving the emitter in 3D"
category = "Audio"
wasm = true

[[example]]
name = "pitch"
path = "examples/audio/pitch.rs"

[package.metadata.example.pitch]
name = "Pitch"
description = "Shows how to directly play a simple pitch"
category = "Audio"
wasm = true

# Diagnostics
[[example]]
name = "log_diagnostics"
path = "examples/diagnostics/log_diagnostics.rs"
doc-scrape-examples = true

[package.metadata.example.log_diagnostics]
name = "Log Diagnostics"
description = "Add a plugin that logs diagnostics, like frames per second (FPS), to the console"
category = "Diagnostics"
wasm = true

[[example]]
name = "custom_diagnostic"
path = "examples/diagnostics/custom_diagnostic.rs"
doc-scrape-examples = true

[package.metadata.example.custom_diagnostic]
name = "Custom Diagnostic"
description = "Shows how to create a custom diagnostic"
category = "Diagnostics"
wasm = true

# ECS (Entity Component System)
[[example]]
name = "ecs_guide"
path = "examples/ecs/ecs_guide.rs"
doc-scrape-examples = true

[package.metadata.example.ecs_guide]
name = "ECS Guide"
description = "Full guide to Bevy's ECS"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "apply_deferred"
path = "examples/ecs/apply_deferred.rs"
doc-scrape-examples = true

[package.metadata.example.apply_deferred]
name = "Apply System Buffers"
description = "Show how to use `apply_deferred` system"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "component_change_detection"
path = "examples/ecs/component_change_detection.rs"
doc-scrape-examples = true

[package.metadata.example.component_change_detection]
name = "Component Change Detection"
description = "Change detection on components"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "custom_query_param"
path = "examples/ecs/custom_query_param.rs"
doc-scrape-examples = true

[package.metadata.example.custom_query_param]
name = "Custom Query Parameters"
description = "Groups commonly used compound queries and query filters into a single type"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "event"
path = "examples/ecs/event.rs"
doc-scrape-examples = true

[package.metadata.example.event]
name = "Event"
description = "Illustrates event creation, activation, and reception"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "fixed_timestep"
path = "examples/ecs/fixed_timestep.rs"
doc-scrape-examples = true

[package.metadata.example.fixed_timestep]
name = "Fixed Timestep"
description = "Shows how to create systems that run every fixed timestep, rather than every tick"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "generic_system"
path = "examples/ecs/generic_system.rs"
doc-scrape-examples = true

[package.metadata.example.generic_system]
name = "Generic System"
description = "Shows how to create systems that can be reused with different types"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "hierarchy"
path = "examples/ecs/hierarchy.rs"
doc-scrape-examples = true

[package.metadata.example.hierarchy]
name = "Hierarchy"
description = "Creates a hierarchy of parents and children entities"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "iter_combinations"
path = "examples/ecs/iter_combinations.rs"
doc-scrape-examples = true

[package.metadata.example.iter_combinations]
name = "Iter Combinations"
description = "Shows how to iterate over combinations of query results"
category = "ECS (Entity Component System)"
wasm = true

[[example]]
name = "one_shot_systems"
path = "examples/ecs/one_shot_systems.rs"

[package.metadata.example.one_shot_systems]
name = "One Shot Systems"
description = "Shows how to flexibly run systems without scheduling them"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "parallel_query"
path = "examples/ecs/parallel_query.rs"
doc-scrape-examples = true

[package.metadata.example.parallel_query]
name = "Parallel Query"
description = "Illustrates parallel queries with `ParallelIterator`"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "removal_detection"
path = "examples/ecs/removal_detection.rs"
doc-scrape-examples = true

[package.metadata.example.removal_detection]
name = "Removal Detection"
description = "Query for entities that had a specific component removed earlier in the current frame"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "run_conditions"
path = "examples/ecs/run_conditions.rs"
doc-scrape-examples = true

[package.metadata.example.run_conditions]
name = "Run Conditions"
description = "Run systems only when one or multiple conditions are met"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "startup_system"
path = "examples/ecs/startup_system.rs"
doc-scrape-examples = true

[package.metadata.example.startup_system]
name = "Startup System"
description = "Demonstrates a startup system (one that runs once when the app starts up)"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "state"
path = "examples/ecs/state.rs"
doc-scrape-examples = true

[package.metadata.example.state]
name = "State"
description = "Illustrates how to use States to control transitioning from a Menu state to an InGame state"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "system_piping"
path = "examples/ecs/system_piping.rs"
doc-scrape-examples = true

[package.metadata.example.system_piping]
name = "System Piping"
description = "Pipe the output of one system into a second, allowing you to handle any errors gracefully"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "system_closure"
path = "examples/ecs/system_closure.rs"
doc-scrape-examples = true

[package.metadata.example.system_closure]
name = "System Closure"
description = "Show how to use closures as systems, and how to configure `Local` variables by capturing external state"
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "system_param"
path = "examples/ecs/system_param.rs"
doc-scrape-examples = true

[package.metadata.example.system_param]
name = "System Parameter"
description = "Illustrates creating custom system parameters with `SystemParam`"
category = "ECS (Entity Component System)"
wasm = false

# Time
[[example]]
name = "time"
path = "examples/time/time.rs"

[package.metadata.example.time]
name = "Time handling"
description = "Explains how Time is handled in ECS"
category = "Time"
wasm = false

[[example]]
name = "virtual_time"
path = "examples/time/virtual_time.rs"

[package.metadata.example.virtual_time]
name = "Virtual time"
description = "Shows how `Time<Virtual>` can be used to pause, resume, slow down and speed up a game."
category = "Time"
wasm = false

[[example]]
name = "timers"
path = "examples/time/timers.rs"
doc-scrape-examples = true

[package.metadata.example.timers]
name = "Timers"
description = "Illustrates ticking `Timer` resources inside systems and handling their state"
category = "Time"
wasm = false


# Games
[[example]]
name = "alien_cake_addict"
path = "examples/games/alien_cake_addict.rs"
doc-scrape-examples = true

[package.metadata.example.alien_cake_addict]
name = "Alien Cake Addict"
description = "Eat the cakes. Eat them all. An example 3D game"
category = "Games"
wasm = true

[[example]]
name = "breakout"
path = "examples/games/breakout.rs"
doc-scrape-examples = true

[package.metadata.example.breakout]
name = "Breakout"
description = "An implementation of the classic game \"Breakout\""
category = "Games"
wasm = true

[[example]]
name = "contributors"
path = "examples/games/contributors.rs"
doc-scrape-examples = true

[package.metadata.example.contributors]
name = "Contributors"
description = "Displays each contributor as a bouncy bevy-ball!"
category = "Games"
wasm = true

[[example]]
name = "game_menu"
path = "examples/games/game_menu.rs"
doc-scrape-examples = true

[package.metadata.example.game_menu]
name = "Game Menu"
description = "A simple game menu"
category = "Games"
wasm = true

# Input
[[example]]
name = "char_input_events"
path = "examples/input/char_input_events.rs"
doc-scrape-examples = true

[package.metadata.example.char_input_events]
name = "Char Input Events"
description = "Prints out all chars as they are inputted"
category = "Input"
wasm = false

[[example]]
name = "gamepad_input"
path = "examples/input/gamepad_input.rs"
doc-scrape-examples = true

[package.metadata.example.gamepad_input]
name = "Gamepad Input"
description = "Shows handling of gamepad input, connections, and disconnections"
category = "Input"
wasm = false

[[example]]
name = "gamepad_input_events"
path = "examples/input/gamepad_input_events.rs"
doc-scrape-examples = true

[package.metadata.example.gamepad_input_events]
name = "Gamepad Input Events"
description = "Iterates and prints gamepad input and connection events"
category = "Input"
wasm = false

[[example]]
name = "gamepad_rumble"
path = "examples/input/gamepad_rumble.rs"
doc-scrape-examples = true

[package.metadata.example.gamepad_rumble]
name = "Gamepad Rumble"
description = "Shows how to rumble a gamepad using force feedback"
category = "Input"
wasm = false

[[example]]
name = "keyboard_input"
path = "examples/input/keyboard_input.rs"
doc-scrape-examples = true

[package.metadata.example.keyboard_input]
name = "Keyboard Input"
description = "Demonstrates handling a key press/release"
category = "Input"
wasm = false

[[example]]
name = "keyboard_modifiers"
path = "examples/input/keyboard_modifiers.rs"
doc-scrape-examples = true

[package.metadata.example.keyboard_modifiers]
name = "Keyboard Modifiers"
description = "Demonstrates using key modifiers (ctrl, shift)"
category = "Input"
wasm = false

[[example]]
name = "keyboard_input_events"
path = "examples/input/keyboard_input_events.rs"
doc-scrape-examples = true

[package.metadata.example.keyboard_input_events]
name = "Keyboard Input Events"
description = "Prints out all keyboard events"
category = "Input"
wasm = false

[[example]]
name = "mouse_input"
path = "examples/input/mouse_input.rs"
doc-scrape-examples = true

[package.metadata.example.mouse_input]
name = "Mouse Input"
description = "Demonstrates handling a mouse button press/release"
category = "Input"
wasm = false

[[example]]
name = "mouse_input_events"
path = "examples/input/mouse_input_events.rs"
doc-scrape-examples = true

[package.metadata.example.mouse_input_events]
name = "Mouse Input Events"
description = "Prints out all mouse events (buttons, movement, etc.)"
category = "Input"
wasm = false

[[example]]
name = "mouse_grab"
path = "examples/input/mouse_grab.rs"
doc-scrape-examples = true

[package.metadata.example.mouse_grab]
name = "Mouse Grab"
description = "Demonstrates how to grab the mouse, locking the cursor to the app's screen"
category = "Input"
wasm = false

[[example]]
name = "touch_input"
path = "examples/input/touch_input.rs"
doc-scrape-examples = true

[package.metadata.example.touch_input]
name = "Touch Input"
description = "Displays touch presses, releases, and cancels"
category = "Input"
wasm = false

[[example]]
name = "touch_input_events"
path = "examples/input/touch_input_events.rs"
doc-scrape-examples = true

[package.metadata.example.touch_input_events]
name = "Touch Input Events"
description = "Prints out all touch inputs"
category = "Input"
wasm = false

[[example]]
name = "text_input"
path = "examples/input/text_input.rs"
doc-scrape-examples = true

[package.metadata.example.text_input]
name = "Text Input"
description = "Simple text input with IME support"
category = "Input"
wasm = false

# Reflection
[[example]]
name = "reflection"
path = "examples/reflection/reflection.rs"
doc-scrape-examples = true

[package.metadata.example.reflection]
name = "Reflection"
description = "Demonstrates how reflection in Bevy provides a way to dynamically interact with Rust types"
category = "Reflection"
wasm = false

[[example]]
name = "generic_reflection"
path = "examples/reflection/generic_reflection.rs"
doc-scrape-examples = true

[package.metadata.example.generic_reflection]
name = "Generic Reflection"
description = "Registers concrete instances of generic types that may be used with reflection"
category = "Reflection"
wasm = false

[[example]]
name = "reflection_types"
path = "examples/reflection/reflection_types.rs"
doc-scrape-examples = true

[package.metadata.example.reflection_types]
name = "Reflection Types"
description = "Illustrates the various reflection types available"
category = "Reflection"
wasm = false

[[example]]
name = "trait_reflection"
path = "examples/reflection/trait_reflection.rs"
doc-scrape-examples = true

[package.metadata.example.trait_reflection]
name = "Trait Reflection"
description = "Allows reflection with trait objects"
category = "Reflection"
wasm = false

# Scene
[[example]]
name = "scene"
path = "examples/scene/scene.rs"
doc-scrape-examples = true

[package.metadata.example.scene]
name = "Scene"
description = "Demonstrates loading from and saving scenes to files"
category = "Scene"
wasm = false

# Shaders
[[package.metadata.example_category]]
name = "Shaders"
description = """
These examples demonstrate how to implement different shaders in user code.

A shader in its most common usage is a small program that is run by the GPU per-vertex in a mesh (a vertex shader) or per-affected-screen-fragment (a fragment shader.) The GPU executes these programs in a highly parallel way.

There are also compute shaders which are used for more general processing leveraging the GPU's parallelism.
"""

[[example]]
name = "custom_vertex_attribute"
path = "examples/shader/custom_vertex_attribute.rs"
doc-scrape-examples = true

[package.metadata.example.custom_vertex_attribute]
name = "Custom Vertex Attribute"
description = "A shader that reads a mesh's custom vertex attribute"
category = "Shaders"
wasm = true

[[example]]
name = "post_processing"
path = "examples/shader/post_processing.rs"
doc-scrape-examples = true

[package.metadata.example.post_processing]
name = "Post Processing - Custom Render Pass"
description = "A custom post processing effect, using a custom render pass that runs after the main pass"
category = "Shaders"
wasm = true

[[example]]
name = "shader_defs"
path = "examples/shader/shader_defs.rs"
doc-scrape-examples = true

[package.metadata.example.shader_defs]
name = "Shader Defs"
description = "A shader that uses \"shaders defs\" (a bevy tool to selectively toggle parts of a shader)"
category = "Shaders"
wasm = true

[[example]]
name = "shader_material"
path = "examples/shader/shader_material.rs"
doc-scrape-examples = true

[package.metadata.example.shader_material]
name = "Material"
description = "A shader and a material that uses it"
category = "Shaders"
wasm = true

[[example]]
name = "extended_material"
path = "examples/shader/extended_material.rs"

[package.metadata.example.extended_material]
name = "Extended Material"
description = "A custom shader that builds on the standard material"
category = "Shaders"
wasm = true

[[example]]
name = "shader_prepass"
path = "examples/shader/shader_prepass.rs"
doc-scrape-examples = true

[package.metadata.example.shader_prepass]
name = "Material Prepass"
description = "A shader that uses the various textures generated by the prepass"
category = "Shaders"
wasm = false

[[example]]
name = "shader_material_screenspace_texture"
path = "examples/shader/shader_material_screenspace_texture.rs"
doc-scrape-examples = true

[package.metadata.example.shader_material_screenspace_texture]
name = "Material - Screenspace Texture"
description = "A shader that samples a texture with view-independent UV coordinates"
category = "Shaders"
wasm = true

[[example]]
name = "shader_material_glsl"
path = "examples/shader/shader_material_glsl.rs"
doc-scrape-examples = true

[package.metadata.example.shader_material_glsl]
name = "Material - GLSL"
description = "A shader that uses the GLSL shading language"
category = "Shaders"
wasm = true

[[example]]
name = "shader_instancing"
path = "examples/shader/shader_instancing.rs"
doc-scrape-examples = true

[package.metadata.example.shader_instancing]
name = "Instancing"
description = "A shader that renders a mesh multiple times in one draw call"
category = "Shaders"
wasm = true

[[example]]
name = "animate_shader"
path = "examples/shader/animate_shader.rs"
doc-scrape-examples = true

[package.metadata.example.animate_shader]
name = "Animated"
description = "A shader that uses dynamic data like the time since startup"
category = "Shaders"
wasm = true

[[example]]
name = "compute_shader_game_of_life"
path = "examples/shader/compute_shader_game_of_life.rs"
doc-scrape-examples = true

[package.metadata.example.compute_shader_game_of_life]
name = "Compute - Game of Life"
description = "A compute shader that simulates Conway's Game of Life"
category = "Shaders"
wasm = false

[[example]]
name = "array_texture"
path = "examples/shader/array_texture.rs"
doc-scrape-examples = true

[package.metadata.example.array_texture]
name = "Array Texture"
description = "A shader that shows how to reuse the core bevy PBR shading functionality in a custom material that obtains the base color from an array texture."
category = "Shaders"
wasm = true

[[example]]
name = "texture_binding_array"
path = "examples/shader/texture_binding_array.rs"
doc-scrape-examples = true

[package.metadata.example.texture_binding_array]
name = "Texture Binding Array (Bindless Textures)"
description = "A shader that shows how to bind and sample multiple textures as a binding array (a.k.a. bindless textures)."
category = "Shaders"
wasm = false

# Stress tests
[[package.metadata.example_category]]
name = "Stress Tests"
description = """
These examples are used to test the performance and stability of various parts of the engine in an isolated way.

Due to the focus on performance it's recommended to run the stress tests in release mode:

```sh
cargo run --release --example <example name>
```
"""

[[example]]
name = "bevymark"
path = "examples/stress_tests/bevymark.rs"
doc-scrape-examples = true

[package.metadata.example.bevymark]
name = "Bevymark"
description = "A heavy sprite rendering workload to benchmark your system with Bevy"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_animated_sprites"
path = "examples/stress_tests/many_animated_sprites.rs"
doc-scrape-examples = true

[package.metadata.example.many_animated_sprites]
name = "Many Animated Sprites"
description = "Displays many animated sprites in a grid arrangement with slight offsets to their animation timers. Used for performance testing."
category = "Stress Tests"
wasm = true

[[example]]
name = "many_buttons"
path = "examples/stress_tests/many_buttons.rs"
doc-scrape-examples = true

[package.metadata.example.many_buttons]
name = "Many Buttons"
description = "Test rendering of many UI elements"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_cubes"
path = "examples/stress_tests/many_cubes.rs"
doc-scrape-examples = true

[package.metadata.example.many_cubes]
name = "Many Cubes"
description = "Simple benchmark to test per-entity draw overhead. Run with the `sphere` argument to test frustum culling"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_gizmos"
path = "examples/stress_tests/many_gizmos.rs"
doc-scrape-examples = true

[package.metadata.example.many_gizmos]
name = "Many Gizmos"
description = "Test rendering of many gizmos"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_foxes"
path = "examples/stress_tests/many_foxes.rs"
doc-scrape-examples = true

[package.metadata.example.many_foxes]
name = "Many Foxes"
description = "Loads an animated fox model and spawns lots of them. Good for testing skinned mesh performance. Takes an unsigned integer argument for the number of foxes to spawn. Defaults to 1000"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_glyphs"
path = "examples/stress_tests/many_glyphs.rs"
doc-scrape-examples = true

[package.metadata.example.many_glyphs]
name = "Many Glyphs"
description = "Simple benchmark to test text rendering."
category = "Stress Tests"
wasm = true

[[example]]
name = "many_lights"
path = "examples/stress_tests/many_lights.rs"
doc-scrape-examples = true

[package.metadata.example.many_lights]
name = "Many Lights"
description = "Simple benchmark to test rendering many point lights. Run with `WGPU_SETTINGS_PRIO=webgl2` to restrict to uniform buffers and max 256 lights"
category = "Stress Tests"
wasm = true

[[example]]
name = "many_sprites"
path = "examples/stress_tests/many_sprites.rs"
doc-scrape-examples = true

[package.metadata.example.many_sprites]
name = "Many Sprites"
description = "Displays many sprites in a grid arrangement! Used for performance testing. Use `--colored` to enable color tinted sprites."
category = "Stress Tests"
wasm = true

[[example]]
name = "transform_hierarchy"
path = "examples/stress_tests/transform_hierarchy.rs"
doc-scrape-examples = true

[package.metadata.example.transform_hierarchy]
name = "Transform Hierarchy"
description = "Various test cases for hierarchy and transform propagation performance"
category = "Stress Tests"
wasm = false

[[example]]
name = "text_pipeline"
path = "examples/stress_tests/text_pipeline.rs"
doc-scrape-examples = true

[package.metadata.example.text_pipeline]
name = "Text Pipeline"
description = "Text Pipeline benchmark"
category = "Stress Tests"
wasm = false

# Tools
[[example]]
name = "scene_viewer"
path = "examples/tools/scene_viewer/main.rs"
doc-scrape-examples = true

[package.metadata.example.scene_viewer]
name = "Scene Viewer"
description = "A simple way to view glTF models with Bevy. Just run `cargo run --release --example scene_viewer /path/to/model.gltf#Scene0`, replacing the path as appropriate. With no arguments it will load the FieldHelmet glTF model from the repository assets subdirectory"
category = "Tools"
wasm = true

[[example]]
name = "gamepad_viewer"
path = "examples/tools/gamepad_viewer.rs"
doc-scrape-examples = true

[package.metadata.example.gamepad_viewer]
name = "Gamepad Viewer"
description = "Shows a visualization of gamepad buttons, sticks, and triggers"
category = "Tools"
wasm = true

[[example]]
name = "nondeterministic_system_order"
path = "examples/ecs/nondeterministic_system_order.rs"
doc-scrape-examples = true

[package.metadata.example.nondeterministic_system_order]
name = "Nondeterministic System Order"
description = "Systems run in parallel, but their order isn't always deterministic. Here's how to detect and fix this."
category = "ECS (Entity Component System)"
wasm = false

[[example]]
name = "3d_rotation"
path = "examples/transforms/3d_rotation.rs"
doc-scrape-examples = true

[package.metadata.example.3d_rotation]
name = "3D Rotation"
description = "Illustrates how to (constantly) rotate an object around an axis"
category = "Transforms"
wasm = true

[[example]]
name = "scale"
path = "examples/transforms/scale.rs"
doc-scrape-examples = true

[package.metadata.example.scale]
name = "Scale"
description = "Illustrates how to scale an object in each direction"
category = "Transforms"
wasm = true

[[example]]
name = "transform"
path = "examples/transforms/transform.rs"
doc-scrape-examples = true

[package.metadata.example.transform]
name = "Transform"
description = "Shows multiple transformations of objects"
category = "Transforms"
wasm = true

[[example]]
name = "translation"
path = "examples/transforms/translation.rs"
doc-scrape-examples = true

[package.metadata.example.translation]
name = "Translation"
description = "Illustrates how to move an object along an axis"
category = "Transforms"
wasm = true

# UI (User Interface)
[[example]]
name = "borders"
path = "examples/ui/borders.rs"
doc-scrape-examples = true

[package.metadata.example.borders]
name = "Borders"
description = "Demonstrates how to create a node with a border"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "button"
path = "examples/ui/button.rs"
doc-scrape-examples = true

[package.metadata.example.button]
name = "Button"
description = "Illustrates creating and updating a button"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "display_and_visibility"
path = "examples/ui/display_and_visibility.rs"
doc-scrape-examples = true

[package.metadata.example.display_and_visibility]
name = "Display and Visibility"
description = "Demonstrates how Display and Visibility work in the UI."
category = "UI (User Interface)"
wasm = true

[[example]]
name = "window_fallthrough"
path = "examples/ui/window_fallthrough.rs"
doc-scrape-examples = true

[package.metadata.example.window_fallthrough]
name = "Window Fallthrough"
description = "Illustrates how to access `winit::window::Window`'s `hittest` functionality."
category = "UI (User Interface)"
wasm = false

[[example]]
name = "font_atlas_debug"
path = "examples/ui/font_atlas_debug.rs"
doc-scrape-examples = true

[package.metadata.example.font_atlas_debug]
name = "Font Atlas Debug"
description = "Illustrates how FontAtlases are populated (used to optimize text rendering internally)"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "overflow"
path = "examples/ui/overflow.rs"
doc-scrape-examples = true

[package.metadata.example.overflow]
name = "Overflow"
description = "Simple example demonstrating overflow behavior"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "overflow_debug"
path = "examples/ui/overflow_debug.rs"
doc-scrape-examples = true

[package.metadata.example.overflow_debug]
name = "Overflow and Clipping Debug"
description = "An example to debug overflow and clipping behavior"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "relative_cursor_position"
path = "examples/ui/relative_cursor_position.rs"
doc-scrape-examples = true

[package.metadata.example.relative_cursor_position]
name = "Relative Cursor Position"
description = "Showcases the RelativeCursorPosition component"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "size_constraints"
path = "examples/ui/size_constraints.rs"
doc-scrape-examples = true

[package.metadata.example.size_constraints]
name = "Size Constraints"
description = "Demonstrates how the to use the size constraints to control the size of a UI node."
category = "UI (User Interface)"
wasm = true

[[example]]
name = "text"
path = "examples/ui/text.rs"
doc-scrape-examples = true

[package.metadata.example.text]
name = "Text"
description = "Illustrates creating and updating text"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "text_debug"
path = "examples/ui/text_debug.rs"
doc-scrape-examples = true

[package.metadata.example.text_debug]
name = "Text Debug"
description = "An example for debugging text layout"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "flex_layout"
path = "examples/ui/flex_layout.rs"
doc-scrape-examples = true

[package.metadata.example.flex_layout]
name = "Flex Layout"
description = "Demonstrates how the AlignItems and JustifyContent properties can be composed to layout nodes and position text"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "text_wrap_debug"
path = "examples/ui/text_wrap_debug.rs"
doc-scrape-examples = true

[package.metadata.example.text_wrap_debug]
name = "Text Wrap Debug"
description = "Demonstrates text wrapping"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "grid"
path = "examples/ui/grid.rs"
doc-scrape-examples = true

[package.metadata.example.grid]
name = "CSS Grid"
description = "An example for CSS Grid layout"

category = "UI (User Interface)"
wasm = true

[[example]]
name = "transparency_ui"
path = "examples/ui/transparency_ui.rs"
doc-scrape-examples = true

[package.metadata.example.transparency_ui]
name = "Transparency UI"
description = "Demonstrates transparency for UI"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "z_index"
path = "examples/ui/z_index.rs"
doc-scrape-examples = true

[package.metadata.example.z_index]
name = "UI Z-Index"
description = "Demonstrates how to control the relative depth (z-position) of UI elements"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "ui"
path = "examples/ui/ui.rs"
doc-scrape-examples = true

[package.metadata.example.ui]
name = "UI"
description = "Illustrates various features of Bevy UI"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "ui_scaling"
path = "examples/ui/ui_scaling.rs"
doc-scrape-examples = true

[package.metadata.example.ui_scaling]
name = "UI Scaling"
description = "Illustrates how to scale the UI"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "ui_texture_atlas"
path = "examples/ui/ui_texture_atlas.rs"
doc-scrape-examples = true

[package.metadata.example.ui_texture_atlas]
name = "UI Texture Atlas"
description = "Illustrates how to use TextureAtlases in UI"
category = "UI (User Interface)"
wasm = true

[[example]]
name = "viewport_debug"
path = "examples/ui/viewport_debug.rs"
doc-scrape-examples = true

[package.metadata.example.viewport_debug]
name = "Viewport Debug"
description = "An example for debugging viewport coordinates"
category = "UI (User Interface)"
wasm = true

# Window
[[example]]
name = "clear_color"
path = "examples/window/clear_color.rs"
doc-scrape-examples = true

[package.metadata.example.clear_color]
name = "Clear Color"
description = "Creates a solid color window"
category = "Window"
wasm = true

[[example]]
name = "low_power"
path = "examples/window/low_power.rs"
doc-scrape-examples = true

[package.metadata.example.low_power]
name = "Low Power"
description = "Demonstrates settings to reduce power use for bevy applications"
category = "Window"
wasm = true

[[example]]
name = "multiple_windows"
path = "examples/window/multiple_windows.rs"
doc-scrape-examples = true

[package.metadata.example.multiple_windows]
name = "Multiple Windows"
description = "Demonstrates creating multiple windows, and rendering to them"
category = "Window"
wasm = false

[[example]]
name = "scale_factor_override"
path = "examples/window/scale_factor_override.rs"
doc-scrape-examples = true

[package.metadata.example.scale_factor_override]
name = "Scale Factor Override"
description = "Illustrates how to customize the default window settings"
category = "Window"
wasm = true

[[example]]
name = "screenshot"
path = "examples/window/screenshot.rs"
doc-scrape-examples = true

[package.metadata.example.screenshot]
name = "Screenshot"
description = "Shows how to save screenshots to disk"
category = "Window"
wasm = true

[[example]]
name = "transparent_window"
path = "examples/window/transparent_window.rs"
doc-scrape-examples = true

[package.metadata.example.transparent_window]
name = "Transparent Window"
description = "Illustrates making the window transparent and hiding the window decoration"
category = "Window"
wasm = false

[[example]]
name = "window_settings"
path = "examples/window/window_settings.rs"
doc-scrape-examples = true

[package.metadata.example.window_settings]
name = "Window Settings"
description = "Demonstrates customizing default window settings"
category = "Window"
wasm = true

[[example]]
name = "resizing"
path = "tests/window/resizing.rs"
doc-scrape-examples = true

[package.metadata.example.resizing]
hidden = true

[[example]]
name = "minimising"
path = "tests/window/minimising.rs"
doc-scrape-examples = true

[package.metadata.example.minimising]
hidden = true

[[example]]
name = "window_resizing"
path = "examples/window/window_resizing.rs"
doc-scrape-examples = true

[[example]]
name = "fallback_image"
path = "examples/shader/fallback_image.rs"
doc-scrape-examples = true

[package.metadata.example.fallback_image]
hidden = true

[package.metadata.example.window_resizing]
name = "Window Resizing"
description = "Demonstrates resizing and responding to resizing a window"
category = "Window"
wasm = true

[[example]]
name = "ui_material"
path = "examples/ui/ui_material.rs"
doc-scrape-examples = true

[package.metadata.example.ui_material]
name = "UI Material"
description = "Demonstrates creating and using custom Ui materials"
category = "UI (User Interface)"
wasm = true

[profile.wasm-release]
inherits = "release"
opt-level = "z"
lto = "fat"
codegen-units = 1

[profile.stress-test]
inherits = "release"
lto = "fat"
panic = "abort"

[package.metadata.docs.rs]
cargo-args = ["-Zunstable-options", "-Zrustdoc-scrape-examples"]
